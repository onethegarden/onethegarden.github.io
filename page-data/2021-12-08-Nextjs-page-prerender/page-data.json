{
    "componentChunkName": "component---src-components-post-template-tsx",
    "path": "/2021-12-08-Nextjs-page-prerender/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p><a href=\"https://nextjs.org/docs/basic-features/pages\">https://nextjs.org/docs/basic-features/pages</a> 를 번역한 내용입니다.</p>\n<h2 id=\"page\" style=\"position:relative;\"><a href=\"#page\" aria-label=\"page permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Page</h2>\n<blockquote>\n<p>이 문서는 Next.js 버전 9.3 이상을 위한 것입니다. 이전 버전의 Next.js를 사용하는 경우 <a href=\"https://nextjs.org/docs/tag/v9.2.2/basic-features/pages\">이전 설명서</a>를 참조하세요</p>\n</blockquote>\n<p>Next.js에서는 page는 <code class=\"language-text\">page</code> 디렉토리에서  <code class=\"language-text\">.js</code>, <code class=\"language-text\">.jsx</code>, <code class=\"language-text\">.ts</code> 또는 <code class=\"language-text\">.tsx</code> 파일로 export된  <strong>React component</strong> 입니다. 각 페이지는 파일 이름을 기반으로 하는 경로와 연결됩니다.</p>\n<p><strong>예시</strong> : 아래와 같이 React component에서 <code class=\"language-text\">pages/about.js</code> 를 만들어 export 하면, <code class=\"language-text\">/about</code> 에 접근할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">About</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">About</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> About</code></pre></div>\n<h3 id=\"dynamic-routes-와-페이지\" style=\"position:relative;\"><a href=\"#dynamic-routes-%EC%99%80-%ED%8E%98%EC%9D%B4%EC%A7%80\" aria-label=\"dynamic routes 와 페이지 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dynamic Routes 와 페이지</h3>\n<p>Next.js는 Dynamic Routes 가 있는 페이지를 지원합니다. 예를들어 <code class=\"language-text\">pages/posts/[id].js</code>파일을 만드는 경우,  <code class=\"language-text\">posts/1</code>, <code class=\"language-text\">posts/2</code> 에 접근할 수 있습니다.</p>\n<blockquote>\n<p>Dynamic Routes 에 대해 자세히 알아보려면  <a href=\"https://nextjs.org/docs/routing/dynamic-routes\">Dynamic Routing documentation</a> 를 확인하세요 .</p>\n</blockquote>\n<h2 id=\"pre-rendering\" style=\"position:relative;\"><a href=\"#pre-rendering\" aria-label=\"pre rendering permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pre-rendering</h2>\n<p><code class=\"language-text\">Next.js</code>는 모든 페이지를 <strong>미리 렌더링</strong> 합니다. 즉, <code class=\"language-text\">Next.js</code>는 클라이언트 측 <code class=\"language-text\">JavaScript</code>로 모든 작업을 수행하는 대신 각 페이지에 대해 미리 <code class=\"language-text\">HTML</code>을 생성합니다. <code class=\"language-text\">Pre-rendering</code>은 <code class=\"language-text\">더 나은 성능</code>과 <code class=\"language-text\">SEO</code>를 할 수 있게 합니다.</p>\n<p>생성된 각 <code class=\"language-text\">HTML</code>은 해당 페이지에 필요한 최소한의 <code class=\"language-text\">JavaScript</code> 코드와 연결됩니다. 브라우저에서 페이지를 로드하면 해당 <code class=\"language-text\">JavaScript</code> 코드가 실행되고 페이지가 완전히 <code class=\"language-text\">interactive</code> 하게 만들어집니다. (이 과정을 <em><code class=\"language-text\">hydration</code></em> 라고 <em>합니다</em> )</p>\n<h3 id=\"두-가지-형태의-pre-rendering\" style=\"position:relative;\"><a href=\"#%EB%91%90-%EA%B0%80%EC%A7%80-%ED%98%95%ED%83%9C%EC%9D%98-pre-rendering\" aria-label=\"두 가지 형태의 pre rendering permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>두 가지 형태의 Pre-rendering</h3>\n<p><code class=\"language-text\">Next.js</code>에는 <strong><code class=\"language-text\">Static Generation</code></strong> 과 <strong><code class=\"language-text\">Server-side Rendering</code></strong> 두 가지의 <code class=\"language-text\">Pre-rendering</code> 형식이 있습니다. </p>\n<p>차이점은 페이지에 대한 <code class=\"language-text\">HTML</code>을 언제 생성하느냐 입니다.</p>\n<ul>\n<li><code class=\"language-text\">Static Generation(권장)</code> : 빌드 시 <code class=\"language-text\">HTML</code> 이 생성되고, 각 요청에 사용됩니다.</li>\n<li><code class=\"language-text\">Server-side Rendering</code> : 각 요청에 대해 <code class=\"language-text\">HTML</code> 이 생성됩니다.</li>\n</ul>\n<p>중요하게도 Next.js를 사용하면 각 페이지에 사용할 <code class=\"language-text\">pre-rendering</code> 방법을 선택할 수 있습니다 . 대부분의 페이지에는 <code class=\"language-text\">Static Generation</code> 을 사용하고 다른 페이지에는 <code class=\"language-text\">Server-side Rendering</code>을 사용하여 <code class=\"language-text\">\"hybrid\"</code> Next.js 앱을 만들 수 있습니다.</p>\n<p>우리는 성능상의 이유로 서버 측 렌더링을 통해 <code class=\"language-text\">Static Generation</code> 를 사용하는 것을 권장합니다. 정적으로 생성된 페이지는 성능 향상을 위한 추가 설정 없이 CDN에서 캐시 처리 할 수 있습니다. 그러나 어떤 경우에는 서버 측 렌더링이 유일한 옵션일 수 있습니다.</p>\n<p> <code class=\"language-text\">Static Generation</code> 또는 <code class=\"language-text\">Server-side Rendering</code> 과 함께 <code class=\"language-text\">Client-side Rendering</code>을 사용할 수도 있습니다 . 즉, 페이지의 일부는 클라이언트 측 JavaScript로 완전히 렌더링될 수 있습니다. 자세한 내용은 <a href=\"https://nextjs.org/docs/basic-features/data-fetching#fetching-data-on-the-client-side\">데이터 가져오기</a> 문서를 참조하세요.</p>\n<h2 id=\"static-generation권장\" style=\"position:relative;\"><a href=\"#static-generation%EA%B6%8C%EC%9E%A5\" aria-label=\"static generation권장 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Static Generation(권장)</h2>\n<p>페이지가 <code class=\"language-text\">Static Generation</code> 을 사용하는 경우 페이지 HTML은 <strong>빌드 시</strong> 생성됩니다. 즉, 프로덕션에서  <code class=\"language-text\">next build</code> 를 실행할 때 페이지 HTML이 생성됩니다. 이 HTML은 각 요청에서 재사용됩니다. CDN에서 캐시 처리 할 수 있습니다.</p>\n<p>Next.js에서는 <strong>데이터가 있거나 없는</strong> 페이지를 정적으로 생성할 수 있습니다 . 각각의 경우를 살펴봅시다.</p>\n<h3 id=\"데이터-없는-static-generation\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%97%86%EB%8A%94-static-generation\" aria-label=\"데이터 없는 static generation permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 없는 Static Generation</h3>\n<p>기본적으로 Next.js는 데이터를 가져오지 않고 정적 생성을 사용하여 페이지를 미리 렌더링합니다. 다음은 예시입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">About</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">About</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> About</code></pre></div>\n<p>이 페이지는 미리 렌더링할 외부의 데이터를 가져올 필요가 없습니다. 이럴 때 Next.js는 빌드 시 페이지당 하나의 HTML 파일을 생성합니다.</p>\n<h3 id=\"데이터-있는-static-generation\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9E%88%EB%8A%94-static-generation\" aria-label=\"데이터 있는 static generation permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터 있는 Static Generation</h3>\n<p>일부 페이지는 사전 렌더링을 위해 외부에서 데이터를 가져와야 합니다. 두 가지 시나리오가 있으며 하나 또는 둘 다 적용할 수 있습니다. 각각의 경우에 Next.js가 제공하는 다음 기능을 사용할 수 있습니다.</p>\n<ul>\n<li>페이지 <code class=\"language-text\">content</code>가 데이터에 따라 다릅니다 : <code class=\"language-text\">getStaticProps</code> 를 사용하십시오.</li>\n<li>페이지의 <code class=\"language-text\">path</code>가 데이터에 따라 다릅니다 : <code class=\"language-text\">getStaticPaths</code> 를 사용하십시오. (일반적으로  <code class=\"language-text\">getStaticProps</code> 에 추가적으로 사용합니다.)</li>\n</ul>\n<p><strong>Scenario 1: 페이지 내용이 외부 데이터에 의존</strong></p>\n<p><strong>예</strong> : 블로그 페이지는 CMS(content management system)에서 블로그 게시물 목록을 가져와야 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// TODO: 이 페이지가 pre-render 하기 전에 </span>\n<span class=\"token comment\">//       `posts`데이터 가지고 오기 (API endpoint를 호출해서)</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Blog</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> posts <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>posts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>post<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Blog</code></pre></div>\n<p><code class=\"language-text\">Pre-rendering</code> 에서 이 데이터를 가져오기 위해 Next.js는 동일한 파일에서 <code class=\"language-text\">getStaticProps</code> 라는 <code class=\"language-text\">async</code>함수를 <code class=\"language-text\">export</code> 할 수 있게 허용합니다. 이 함수는 빌드 시 호출되며 fetch된 데이터를 사전렌더링 시  페이지에 <code class=\"language-text\">props</code> 를 전달할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Blog</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> posts <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// posts를 렌더링 한다..</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 이 함수는 빌드 시에 호출됩니다.</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// posts 를 가져오기 위한 API endpoint</span>\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://.../posts'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// Blog component에 { props: { posts } } 로 리턴합니다</span>\n  <span class=\"token comment\">// 빌드 시에 `posts`를 props로 받을 수 있습니다</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      posts<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Blog</code></pre></div>\n<p><code class=\"language-text\">getStaticProps</code> 가 어떻게 동작하는지 더 알고 시다면 <a href=\"https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation\">Data Fetching documentation</a> 문서를 확인하세요</p>\n<p><strong>Scenario 2: Your page paths depend on external data</strong></p>\n<p>Next.js는 <strong>dynamic routes</strong>로 페이지를 만들 수 있습니다. 예를들어,  <code class=\"language-text\">pages/posts/[id].js</code>  이런 파일을 만들어서 <code class=\"language-text\">id</code> 에 베이스를 둔 하나의 블로그 페이지를 보여줄 수 있습니다. 이것은 <code class=\"language-text\">posts/1</code> 로 접근했을 때  <code class=\"language-text\">id:1</code> 인 블로그를 보여줄 수 있게 합니다</p>\n<blockquote>\n<p>dynamic routing에 대해 더 알고 싶다면, <a href=\"https://nextjs.org/docs/routing/dynamic-routes\">Dynamic Routing documentation</a> 를 확인하세요.</p>\n</blockquote>\n<p>그러나 빌드 시 사전 렌더링하려는 <code class=\"language-text\">id</code> 항목은 외부 데이터에 따라 다를 수 있습니다.</p>\n<p>예시 : 데이터베이스에 하나의 블로그 게시물(<code class=\"language-text\">id: 1</code> ) 만 추가했다고 가정 합니다. 이 경우 빌드 시에 <code class=\"language-text\">posts/1</code> 만 pre-render 하기 원할 것 입니다.</p>\n<p>나중에, <code class=\"language-text\">id:2</code> 로 된 두 번째 포스트를 추가합니다. 그러면  <code class=\"language-text\">posts/2</code> 도 pre-render 되기를 원할 것이죠.</p>\n<p>따라서 pre-render 되는 페이지 <strong>경로</strong>는 외부 데이터에 따라 달라집니다. 이를 처리하기 위해 Next.js 는 dynamic page(이번 경우에는 <code class=\"language-text\">pages/posts/[id].js</code> )에서 <code class=\"language-text\">getStaticPaths</code> 라는 <code class=\"language-text\">async</code>함수를 <code class=\"language-text\">export</code> 하여 사용할 수 있게 합니다. 이 함수는 빌드 시에 호출되고 pre-redner 할 path를 정할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 이 함수는 빌드 시에 호출됩니다.</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticPaths</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Cposts 를 가져오기 위한 API endpoint</span>\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://.../posts'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> posts <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// posts기반의 prerender 할 path 가져오기</span>\n  <span class=\"token keyword\">const</span> paths <span class=\"token operator\">=</span> posts<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">post</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    params<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> post<span class=\"token punctuation\">.</span>id <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 우리는 빌드 시에만 이 paths를 pre-render 할 것입니다.</span>\n  <span class=\"token comment\">// { fallback: false } 는 다른 경로는 404인 것을 의미합니다.</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> paths<span class=\"token punctuation\">,</span> fallback<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>또한 <code class=\"language-text\">pages/posts/[id].js</code> 에서, <code class=\"language-text\">id</code> 로 데이터를 가지고 오고 페이지를 pre-render 하여 사용할 수 있게 하기 위해 <code class=\"language-text\">getStaticProps</code> 를 export 해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Post</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> post <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// posts를 렌더링 한다..</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticPaths</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 이 함수는 빌드 시에 호출됩니다.</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getStaticProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> params <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// params 은 post `id`를 가지고 있습니다.</span>\n  <span class=\"token comment\">// 라우트가 /posts/1 이면 params.id 는 1 입니다.</span>\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://.../posts/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>params<span class=\"token punctuation\">.</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> post <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 페이지에 props에 post 데이터 넣어주기</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> post <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Post\n</code></pre></div>\n<p> <code class=\"language-text\">getStaticPaths</code> 이 동작하는 방법에 대해 더 알고 싶다면,  <a href=\"https://nextjs.org/docs/basic-features/data-fetching#getstaticpaths-static-generation\">Data Fetching documentation</a> 를 확인하세요.</p>\n<h2 id=\"static-generation을-언제-사용해야-합니까\" style=\"position:relative;\"><a href=\"#static-generation%EC%9D%84-%EC%96%B8%EC%A0%9C-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%A9%EB%8B%88%EA%B9%8C\" aria-label=\"static generation을 언제 사용해야 합니까 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Static Generation을 언제 사용해야 합니까?</h2>\n<p>페이지를 한 번 build해서 CDN에서 제공할 수 있으므로 모든 요청에 대해 서버가 페이지를 렌더링하도록 하는 것보다 훨씬 빠르기 때문에 가능 하면 <strong>Static Generation</strong>(데이터가 있을 때도, 없을 때도)을 사용하는 것이 좋습니다 .</p>\n<p>다음을 포함한 다양한 유형의 페이지에 대해 <strong>Static Generation</strong>을 사용할 수 있습니다.</p>\n<ul>\n<li>마케팅 페이지</li>\n<li>블로그 포스트와 포트폴리오</li>\n<li>E-commerce 제품 목록</li>\n<li>도움말과 문서</li>\n</ul>\n<p>스스로에게 물어보세요 : \"사용자의 요청 이전에 페이지를 pre-render 할 수 있나?\" 만약 대답이 \"네\" 라면, Static Generation을 사용해야 합니다.</p>\n<p>반면에 만일 사용자의 요청 전에 pre-render 할 수 없다면 Static Generation은 좋은 아이디어가 아닙니다. 아마 그 페이지는 빈번한 데이터 없데이트가 일어나고, 페이지의 내용은 매 요청마다 바뀔 것입니다.</p>\n<p>만약 이런 케이스라면, 다음 중 하나를 사용 할 수 있습니다.</p>\n<ul>\n<li>Static Generation 를 <strong>Client-side Rendering</strong> 와 함께 사용 : 페이지의 일부는 pre-render를 건너뛰고 클라이언트 측 JavaScript를 사용하여 렌더링 할 수 있습니다. 이 접근 방식에 대해 더 알아보려면 <a href=\"https://nextjs.org/docs/basic-features/data-fetching#fetching-data-on-the-client-side\">Data Fetching documentation</a> 를 확인하세요.</li>\n<li><strong>Server-Side Rendering</strong> 사용 : Next.js는 각 요청 페이지를 미리 렌더링합니다. 페이지를 CDN으로 캐시할 수 없기 때문에 속도가 느려지지만 미리 렌더링된 페이지는 항상 최신 상태입니다. 이 접근 방식에 대해 아래에서 이야기할 것입니다.</li>\n</ul>\n<h2 id=\"server-side-rendering\" style=\"position:relative;\"><a href=\"#server-side-rendering\" aria-label=\"server side rendering permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Server-side Rendering</h2>\n<blockquote>\n<p>\"SSR\" 이나 \"Dynamic Rendering\" 이라고도 불려집니다.</p>\n</blockquote>\n<p><strong>Server-side Rendering</strong> 을 페이지에 사용하면, 각 요청에 따라 page HTML이 생성됩니다.</p>\n<p>page에서 Server-side-Rendering을 사용하기 위해, <code class=\"language-text\">async</code> 함수인  <code class=\"language-text\">getServerSideProps</code> 를 export 해야 합니다. 이 함수는 매 요청마다 서버에서 호출됩니다.</p>\n<p>예를들어, 페이지에서 자주 업데이트되는 데이터(외부 API에서 가져옴)를 미리 렌더링해야 한다고 가정합니다.   데이터를 가져와 아래와 같이 <code class=\"language-text\">Page</code> 에 전달할 수 있는 <code class=\"language-text\">getServerSideProps</code> 를 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Page</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// data를 렌더링 한다..</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 매 요청마다 호출된다 </span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getServerSideProps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// data 를 가져오기 위한 API endpoint</span>\n  <span class=\"token keyword\">const</span> res <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://.../data</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> res<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// 페이지에 props에 post 데이터 넣어주기</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> props<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> data <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Page</code></pre></div>\n<p>보시는 것 처럼,  <code class=\"language-text\">getServerSideProps</code>은 <code class=\"language-text\">getStaticProps</code>와 비슷합니다, 하지만 차이점은 <code class=\"language-text\">getServerSideProps</code> 는 빌드 시간이 아니라 모든 요청 마다 실행 된다는 것입니다.</p>\n<p><code class=\"language-text\">getServerSideProps</code> 이 동작하는 방법에 대해 더 알아보려면 <a href=\"https://nextjs.org/docs/basic-features/data-fetching#getserversideprops-server-side-rendering\">데이터 가져오기 문서를</a> 확인하세요</p>\n<h2 id=\"summary\" style=\"position:relative;\"><a href=\"#summary\" aria-label=\"summary permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Summary</h2>\n<p>우리는 Next.js의 두 가지 형태의 pre-rendering에 대해 알아봤습니다.</p>\n<ul>\n<li>Static Generation(<strong>권장</strong>): HTML은 빌드 시 생성되고 각 요청에서 재사용됩니다. Static Generation을 사용해서 page를 만들려면 page component를 export 하거나 <code class=\"language-text\">getStaticProps</code> (필요한 경우 <code class=\"language-text\">getStaticPaths</code> 도)를 export 합니다. 사용자의 요청에 앞서 미리 렌더링할 수 있는 페이지에 적합합니다. 또한, Client-side-Rendering 과 함께 사용하여 추가적인 데이터도 가지고 올 수 있습니다.</li>\n<li><strong>Server-side Rendering: 각 요청마다</strong> HTML이 생성됩니다. page를 Server-side Rendering으로 만들고 싶으면 <code class=\"language-text\">getServerSideProps</code> 를 export 하면 됩니다. Server-side Rendering 은 Static Generation에 비해 느리기 때문에, 반드시 필요한 경우에만 사용해야 합니다.</li>\n</ul>","frontmatter":{"title":"번역 Next.js 의 page, pre-render"},"fields":{"slug":"/2021-12-08-Nextjs-page-prerender/"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#page\">Page</a></p>\n<ul>\n<li><a href=\"#dynamic-routes-%EC%99%80-%ED%8E%98%EC%9D%B4%EC%A7%80\">Dynamic Routes 와 페이지</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#pre-rendering\">Pre-rendering</a></p>\n<ul>\n<li><a href=\"#%EB%91%90-%EA%B0%80%EC%A7%80-%ED%98%95%ED%83%9C%EC%9D%98-pre-rendering\">두 가지 형태의 Pre-rendering</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#static-generation%EA%B6%8C%EC%9E%A5\">Static Generation(권장)</a></p>\n<ul>\n<li><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%97%86%EB%8A%94-static-generation\">데이터 없는 Static Generation</a></li>\n<li><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%9E%88%EB%8A%94-static-generation\">데이터 있는 Static Generation</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#static-generation%EC%9D%84-%EC%96%B8%EC%A0%9C-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC-%ED%95%A9%EB%8B%88%EA%B9%8C\">Static Generation을 언제 사용해야 합니까?</a></p>\n</li>\n<li>\n<p><a href=\"#server-side-rendering\">Server-side Rendering</a></p>\n</li>\n<li>\n<p><a href=\"#summary\">Summary</a></p>\n</li>\n</ul>"}}]}},"pageContext":{"slug":"/2021-12-08-Nextjs-page-prerender/"}},
    "staticQueryHashes": ["290286666"]}