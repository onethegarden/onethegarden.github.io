{
    "componentChunkName": "component---src-components-post-template-tsx",
    "path": "/2021-03-19-reactLifeCycle/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2 id=\"react-lifecycle-of-component\" style=\"position:relative;\"><a href=\"#react-lifecycle-of-component\" aria-label=\"react lifecycle of component permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React LIfecycle of Component</h2>\n<blockquote>\n<p>리액트 컴포넌트의 라이프 사이클에 대한 글</p>\n<p>현재는 클래스형을 많이 사용하지는 않는다고 하지만 그래도 알고 있어야 될 것 같아 정리한다.</p>\n</blockquote>\n<h3 id=\"먼저-클래스형과-함수형의-차이부터-알아보자\" style=\"position:relative;\"><a href=\"#%EB%A8%BC%EC%A0%80-%ED%81%B4%EB%9E%98%EC%8A%A4%ED%98%95%EA%B3%BC-%ED%95%A8%EC%88%98%ED%98%95%EC%9D%98-%EC%B0%A8%EC%9D%B4%EB%B6%80%ED%84%B0-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90\" aria-label=\"먼저 클래스형과 함수형의 차이부터 알아보자 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>먼저 클래스형과 함수형의 차이부터 알아보자!</h3>\n<ul>\n<li>클래스형</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">App</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//클래스로 선언하고 Component를 상속받아 사용해야 한다.</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">//렌더 메소드가 반드시 필요하다.</span>\n    <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"react\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>함수형</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'./App.css'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">App</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"react\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>차이</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>클래스형</th>\n<th>함수형</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>state, lifeCycle 관련 기능 사용 가능</td>\n<td>state, lifeCycle 관련기능 사용 못했다.(hook으로 해결)</td>\n</tr>\n<tr>\n<td>메모리를 함수형보다는 더 씀</td>\n<td>메모리를 클래스형보다 덜 씀</td>\n</tr>\n<tr>\n<td>임의 메서드 정의 가능</td>\n<td>컴포넌트 선언이 편함</td>\n</tr>\n<tr>\n<td>Stateful 컴포넌트 : 로직과 상태를 컴포넌트 내에서 구현, 상대적으로 복잡한 UI</td>\n<td>Stateless 컴포넌트 : state를 사용하지 않고 단순하게 데이터(props)를 받아서 UI에 뿌려줌</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>클래스형 컴포넌트 예제</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> Component <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">//클래스형 컴포넌트에서는 클래스 내의 constructor 메서드에서 state의 초기값을 설정해줘야 함.</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//반드시 호출해줘야 함</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      number<span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> number <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">;</span> <span class=\"token comment\">// state 를 조회할 때에는 this.state 로 조회합니다.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>h1<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>number<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h1<span class=\"token operator\">></span>\n        <span class=\"token operator\">&lt;</span>button\n          <span class=\"token comment\">// onClick 을 통하여 버튼이 클릭됐을 때 호출 할 함수를 지정합니다.</span>\n          onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// this.setState를 사용하여 state에 새로운 값을 넣을 수 있습니다.</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> number<span class=\"token operator\">:</span> number <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n        <span class=\"token operator\">></span>\n          <span class=\"token operator\">+</span><span class=\"token number\">1</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Counter<span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"리액트-컴포넌트-라이프사이클\" style=\"position:relative;\"><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4\" aria-label=\"리액트 컴포넌트 라이프사이클 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>리액트 컴포넌트 라이프사이클</h3>\n<ul>\n<li>\n<p>라이프사이클은 크게 세 부분으로 나뉘어진다. (마운트, 업데이트 , 언마운트)</p>\n</li>\n<li>\n<p>마운트 : DOM이 생성되고 웹 브라우저 상에 나타나는 것</p>\n</li>\n<li>\n<p>업데이트 : 컴포넌트가 업데이트 되는 경우는 네가지</p>\n<ul>\n<li>props가 바뀔 때</li>\n<li>state가 바뀔 때</li>\n<li>부모 컴포넌트가 리렌더링 될 때</li>\n<li>this.forceUpdate로 강제로 렌더링을 트리거 할 때</li>\n</ul>\n</li>\n<li>\n<p>언마운트</p>\n</li>\n</ul>\n<p><img src=\"https://i.imgur.com/cNfpEph.png\" alt=\"image\"></p>\n<p>출처: <a href=\"http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/\">http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/</a></p>\n<h4 id=\"1-마운트\" style=\"position:relative;\"><a href=\"#1-%EB%A7%88%EC%9A%B4%ED%8A%B8\" aria-label=\"1 마운트 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 마운트</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/*\n*    1. constructor\n*    2. getDerivedStateFromProps\n*    3. render\n*    4. componentDidMount\n*/</span>\n\n\n<span class=\"token comment\">/*\n*\t1. constructor : 컴포넌트의 생성자 메서드, 컴포넌트가 만들어질 때 가장먼저 실행\n*\t리액트에서 생성자의 역할은 다음 두 가지가 있다.\n*        - this.state에 객체를 할당하여 지역 state를 초기화\n*        - 인스턴스에 이벤트 처리 메서드를 바인딩\n*/</span>\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> counter<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>handleClick <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleClick</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">/*\n* \t2. getDerivedStateFromProps : props로 받아온 것을 state에 넣어주고 싶을 때 사용\n* \t다른 생명주기 메서드와는 달리 static을 필요로 하고, 이 안에서는 this를 조회 할 수 없음\n* \t컴포넌트가 처음 렌더링 되기 전에 호출되고, 그 이후 리렌더링 되기 전에 매번 실행 됨.\n* \t마운트 후에 다룰 업데이트에서도 props나 state가 바뀌면 이 함수가 실행 됨.\n*/</span>\n<span class=\"token keyword\">static</span> <span class=\"token function\">getDerivedStateFromProps</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps<span class=\"token punctuation\">,</span> prevState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getDerivedStateFromProps\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nextProps<span class=\"token punctuation\">.</span>color <span class=\"token operator\">!==</span> prevState<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> color<span class=\"token operator\">:</span> nextProps<span class=\"token punctuation\">.</span>color <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">//여기서 특정 객체를 반환하게 되면, 해당 객체 안에 있는 내용들이 컴포넌트의 state로 설정 됨.</span>\n    <span class=\"token comment\">//null로 반환 시 아무일도 안일어남</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\">//3. render : 컴포넌트를 렌더링 하는 메서드</span>\n <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div className<span class=\"token operator\">=</span><span class=\"token string\">\"react\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">}</span>\n\n\n\n<span class=\"token comment\">/*\n*\t4. componentDidMount : 컴포넌트의 첫번째 렌더링이 마치고 나면 호출되는 메서드\n*\t이 메서드가 호출되는 시점에는 우리가 만든 컴포넌트가 화면에 나타나는 상태\n*\tDOM을 사용해야하는 외부 라이브러리 연동을 하거나, axios, fetch 등을 통하여 요청하거나\n*\tDOM의 속성을 읽거나 직접 변경\n*/</span></code></pre></div>\n<h4 id=\"2-업데이트\" style=\"position:relative;\"><a href=\"#2-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8\" aria-label=\"2 업데이트 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 업데이트</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">/*\n*    getDerivedStateFromProps\n*    shouldComponentUpdate\n*    render\n*    getSnapshotBeforeUpdate\n*    componentDidUpdate\n*/</span>\n\n<span class=\"token comment\">/*\n*\t1. getDerivedStateFromProps :  props 나 state 가 바뀌었을때도 이 메서드가 호출된다.\n*/</span>\n\n<span class=\"token comment\">/*\n*\t2. shouldComponentUpdate : 컴포넌트가 리렌더링 할지 말지를 결정하는 메서드\n*\t주로 최적화할 때 많이 사용한다고 한다.\n*/</span>\n<span class=\"token function\">shouldComponentUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nextProps<span class=\"token punctuation\">,</span> nextState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"shouldComponentUpdate\"</span><span class=\"token punctuation\">,</span> nextProps<span class=\"token punctuation\">,</span> nextState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 숫자의 마지막 자리가 4면 리렌더링하지 않습니다</span>\n    <span class=\"token keyword\">return</span> nextState<span class=\"token punctuation\">.</span>number <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">!==</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">/*\n*\t3. render 생략\n*/</span>\n\n\n<span class=\"token comment\">/*\n*\t4. getSnapshotBeforeUpdate : 컴포넌트에 변화가 일어나기 직전의 DOM의 상태를 가져와서\n*\t특정 값을 반환하면 그 다음 발생하는 componentDidUpdate 함수에서 받아와서 사용을 할 수 있다.\n*/</span>\n <span class=\"token function\">getSnapshotBeforeUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps<span class=\"token punctuation\">,</span> prevState</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getSnapshotBeforeUpdate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevProps<span class=\"token punctuation\">.</span>color <span class=\"token operator\">!==</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>props<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>myRef<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n     <span class=\"token comment\">//반환한 값으로 그 다음 발생하는 componentDidUpdate 함수에서 받아와서 사용을 할 수 있다.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n\n<span class=\"token comment\">/*\n*\t5. componentDidUpdate : 리렌더링이 마치고, 화면에 우리가 원하는 변화가\n*\t모두 반영되고 난 뒤 호출되는 메서드\n*\t세 번째 파라미터로 4번의 getSnapshotBeforeUpdate에서 반환한 값을 조회할 수 있다.\n*/</span>\n\n<span class=\"token function\">componentDidUpdate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prevProps<span class=\"token punctuation\">,</span> prevState<span class=\"token punctuation\">,</span> snapshot</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"componentDidUpdate\"</span><span class=\"token punctuation\">,</span> prevProps<span class=\"token punctuation\">,</span> prevState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>snapshot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"업데이트 되기 직전 색상: \"</span><span class=\"token punctuation\">,</span> snapshot<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><a href=\"https://codesandbox.io/s/getsnapshotbeforeupdate-yeje-vpmle?fontsize=14&#x26;file=/src/ScrollBox.js:1293-1296\">https://codesandbox.io/s/getsnapshotbeforeupdate-yeje-vpmle?fontsize=14&#x26;file=/src/ScrollBox.js:1293-1296</a> - 사용사례 참고 (스크롤 위치 유지하기)</li>\n</ul>\n<h4 id=\"3-언마운트\" style=\"position:relative;\"><a href=\"#3-%EC%96%B8%EB%A7%88%EC%9A%B4%ED%8A%B8\" aria-label=\"3 언마운트 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 언마운트</h4>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// componentWillUnmount : 컴포넌트가 화면에서 사라지기 전에 호출</span>\n<span class=\"token comment\">// DOM에 직접 등록했었던 이벤트 제거, setTimeout과 같은 것이 있으면 clearTimeout을 통하여 제거</span>\n <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"componentWillUnmount\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>📕리액트 문서의 Hook Motivation 📕</p>\n<blockquote>\n<h3 id=\"class은-사람과-기계를-혼동시킵니다\" style=\"position:relative;\"><a href=\"#class%EC%9D%80-%EC%82%AC%EB%9E%8C%EA%B3%BC-%EA%B8%B0%EA%B3%84%EB%A5%BC-%ED%98%BC%EB%8F%99%EC%8B%9C%ED%82%B5%EB%8B%88%EB%8B%A4\" aria-label=\"class은 사람과 기계를 혼동시킵니다 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Class은 사람과 기계를 혼동시킵니다.</h3>\n<p>Class가 코드의 재사용성과 코드 구성을 좀 더 어렵게 만들 뿐만 아니라, React를 배우는데 큰 진입장벽이라는 것을 알게 되었습니다. Javascript에서 어떻게 <code class=\"language-text\">this</code>가 작동하는지 알아야만 했고, 대부분의 다른 언어와는 다르게 작동합니다. 이벤트 핸들러가 등록되는 방법을 기억해야만 합니다. 불안정한 <a href=\"https://babeljs.io/docs/en/babel-plugin-transform-class-properties/\">문법 제안들</a>이 없다면, 코드는 매우 장황해집니다. 사람들은 props, state, 그리고 top-down 데이터 흐름을 완벽하게 이해할 수 있지만, 여전히 Class는 쉽지 않습니다. React 안에서의 함수와 Class 컴포넌트들을 구별하고 각 요소를 언제 사용하는지는 숙련된 React 개발자 사이에서도 의견이 일치하지 않습니다.</p>\n</blockquote>\n<blockquote>\n<p>이러한 문제를 해결하기 위해, <strong>Hook은 Class없이 React 기능들을 사용하는 방법을 알려줍니다.</strong> 개념적으로 React 컴포넌트는 항상 함수에 더 가깝습니다. Hook은 React의 정신을 희생하지 않고 함수를 받아들입니다. Hook은 명령형 코드로 해결책을 찾을 수 있게 해주며 복잡한 함수형 또는 반응형 프로그래밍 기술을 배우도록 요구하지 않습니다.</p>\n</blockquote>\n<h3 id=\"그래서-나온게-hook\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EB%82%98%EC%98%A8%EA%B2%8C-hook\" aria-label=\"그래서 나온게 hook permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래서 나온게 Hook!</h3>\n<ul>\n<li><code class=\"language-text\">this.state</code> -> <code class=\"language-text\">useState </code></li>\n<li><code class=\"language-text\">componentDidMount</code>, <code class=\"language-text\">componentDidUpdate</code>, <code class=\"language-text\">componentWillUnmount</code> -> <code class=\"language-text\">useEffect</code></li>\n</ul>\n<h3 id=\"useeffect\" style=\"position:relative;\"><a href=\"#useeffect\" aria-label=\"useeffect permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>💫useEffect!!</h3>\n<blockquote>\n<ol>\n<li>\n<p>컴포넌트가 마운트 됐을 때 (처음 나타났을 때)</p>\n</li>\n<li>\n<p>언마운트 됐을 때 (사라질 때)</p>\n</li>\n<li>\n<p>업데이트 될 때 (특정 props가 바뀔 때) <strong>특정 작업을 처리하는 Hook</strong></p>\n</li>\n</ol>\n</blockquote>\n<ol>\n<li>코드를 먼저 보자</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'컴포넌트가 화면에 나타남'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'컴포넌트가 화면에서 사라짐'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//cleanup함수</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<p><code class=\"language-text\">useEffect(함수, 의존배열(deps))</code> : <code class=\"language-text\">useEffect</code>의 첫 번째 파라미터에는 함수, 두 번째 파라미터에는 의존값이 들어있는 배열(deps) 를 넣는다.</p>\n</li>\n<li>\n<p>deps 의존배열</p>\n<ul>\n<li>빈 값<code class=\"language-text\">[]</code>이면 컴포넌트가 처음 나타날때만 <code class=\"language-text\">useEffect</code>에 등록한 함수가 호출된다.</li>\n<li>설정해주지 않으면 <code class=\"language-text\">useEffect(()=> {console.log('리렌더링')})</code>컴포넌트가 리렌더링 될 때만 함수가 호출된다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">cleanup</code>함수 : <code class=\"language-text\">useEffect</code>에서는 반환하는 함수를 cleanup 함수라고 부른다. <code class=\"language-text\">useEffect</code>에 대한 뒷정리를 해주고, deps가 빈 값이면 컴포넌트가 사라질 때 <code class=\"language-text\">cleanup</code>함수가 호출</p>\n</li>\n<li>\n<p>콘솔 화면</p>\n</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/51187540/112601602-fe046f80-8e55-11eb-9e43-c9fb515909a1.png\" alt=\"image\"></p>\n<p>컴포넌트 세 개가 마운트 될 때 <code class=\"language-text\">컴포넌트가 화면에 나타남</code>이 출력되고</p>\n<p><code class=\"language-text\">삭제 </code> 버튼을 눌렀을 때 <code class=\"language-text\">컴포넌트가 화면에서 사라짐</code>이 출력된다.</p>\n<ul>\n<li>\n<p>출처</p>\n<ul>\n<li>누구든지 하는 리액트 - <a href=\"https://velopert.com/3631\">https://velopert.com/3631</a></li>\n<li>모던리액트 - <a href=\"https://react.vlpt.us/basic/25-lifecycle.html\">https://react.vlpt.us/basic/25-lifecycle.html</a></li>\n<li><a href=\"https://ko.reactjs.org/docs/hooks-overview.html\">https://ko.reactjs.org/docs/hooks-overview.html</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"React LIfecycle of Component"},"fields":{"slug":"/2021-03-19-reactLifeCycle/"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#react-lifecycle-of-component\">React LIfecycle of Component</a></p>\n<ul>\n<li>\n<p><a href=\"#%EB%A8%BC%EC%A0%80-%ED%81%B4%EB%9E%98%EC%8A%A4%ED%98%95%EA%B3%BC-%ED%95%A8%EC%88%98%ED%98%95%EC%9D%98-%EC%B0%A8%EC%9D%B4%EB%B6%80%ED%84%B0-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90\">먼저 클래스형과 함수형의 차이부터 알아보자!</a></p>\n</li>\n<li>\n<p><a href=\"#%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EB%9D%BC%EC%9D%B4%ED%94%84%EC%82%AC%EC%9D%B4%ED%81%B4\">리액트 컴포넌트 라이프사이클</a></p>\n<ul>\n<li><a href=\"#1-%EB%A7%88%EC%9A%B4%ED%8A%B8\">1. 마운트</a></li>\n<li><a href=\"#2-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8\">2. 업데이트</a></li>\n<li><a href=\"#3-%EC%96%B8%EB%A7%88%EC%9A%B4%ED%8A%B8\">3. 언마운트</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EB%82%98%EC%98%A8%EA%B2%8C-hook\">그래서 나온게 Hook!</a></p>\n</li>\n<li>\n<p><a href=\"#useeffect\">💫useEffect!!</a></p>\n</li>\n</ul>\n</li>\n</ul>"}}]}},"pageContext":{"slug":"/2021-03-19-reactLifeCycle/"}},
    "staticQueryHashes": ["290286666"]}