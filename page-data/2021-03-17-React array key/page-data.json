{
    "componentChunkName": "component---src-components-post-template-tsx",
    "path": "/2021-03-17-React array key/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2 id=\"react-key-존재-유무에-따른-업데이트-방식\" style=\"position:relative;\"><a href=\"#react-key-%EC%A1%B4%EC%9E%AC-%EC%9C%A0%EB%AC%B4%EC%97%90-%EB%94%B0%EB%A5%B8-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%EB%B0%A9%EC%8B%9D\" aria-label=\"react key 존재 유무에 따른 업데이트 방식 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React key 존재 유무에 따른 업데이트 방식</h2>\n<p>너무 당연하게 쓰고 있던 건데 왜 key를 써야 하는지</p>\n<p>안쓰면 콘솔에 에러로그가 찍히는지에 대한 내용이다 🙄</p>\n<p>예를 들어서 다음과 같은 배열이 있고 이 배열을 렌더링 했을때</p>\n<h3 id=\"key-가-없을-때\" style=\"position:relative;\"><a href=\"#key-%EA%B0%80-%EC%97%86%EC%9D%84-%EB%95%8C\" aria-label=\"key 가 없을 때 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>key 가 없을 때</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//렌더링</span>\narray<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이 배열의 <code class=\"language-text\">b</code>와 <code class=\"language-text\">c</code> 사이에 <code class=\"language-text\">z</code>를 삽입하게 된다면, 리렌더링을 할 때</p>\n<p><code class=\"language-text\">b</code>와 <code class=\"language-text\">c</code>사이에 새 태그 를 삽입하는게 아니라</p>\n<ol>\n<li>기존의 <code class=\"language-text\">c</code>를 <code class=\"language-text\">z</code>로 바꾸고</li>\n<li><code class=\"language-text\">d</code>는 <code class=\"language-text\">c</code>로 바뀌고</li>\n<li>맨 마지막에 <code class=\"language-text\">d</code>가 새로 삽입되게 됨.</li>\n</ol>\n<h3 id=\"key가-있을-때\" style=\"position:relative;\"><a href=\"#key%EA%B0%80-%EC%9E%88%EC%9D%84-%EB%95%8C\" aria-label=\"key가 있을 때 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>key가 있을 때</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[\n  {\n    id: 0,\n    text: 'a'\n  },\n  {\n    id: 1,\n    text: 'b'\n  },\n  {\n    id: 2,\n    text: 'c'\n  },\n  {\n    id: 3,\n    text: 'd'\n  }\n];</code></pre></div>\n<p>이런식으로 키가 있고 이렇게 렌더링이 된다면</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">array<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>div key<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">{</span>item<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><u><strong>기존의 값은 그대로 두고 그 사이에 값을 삽입</strong></u>하게 된다.</p>\n<p>그래서 배열을 렌더링 할 때는 고유한 <code class=\"language-text\">key</code> 값이 있는게 중요하고,</p>\n<p>중복되는 <code class=\"language-text\">key</code>가 있을 때에는 렌더링시에 오류메시지가 콘솔에 나타나게 되고</p>\n<p>업데이트가 정상적으로 이루어지지 않는다.</p>\n<p>출처 : <a href=\"https://react.vlpt.us/basic/11-render-array.html\">배열 렌더링하기</a></p>","frontmatter":{"title":"React array key"},"fields":{"slug":"/2021-03-17-React array key/"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#react-key-%EC%A1%B4%EC%9E%AC-%EC%9C%A0%EB%AC%B4%EC%97%90-%EB%94%B0%EB%A5%B8-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%EB%B0%A9%EC%8B%9D\">React key 존재 유무에 따른 업데이트 방식</a></p>\n<ul>\n<li><a href=\"#key-%EA%B0%80-%EC%97%86%EC%9D%84-%EB%95%8C\">key 가 없을 때</a></li>\n<li><a href=\"#key%EA%B0%80-%EC%9E%88%EC%9D%84-%EB%95%8C\">key가 있을 때</a></li>\n</ul>\n</li>\n</ul>"}}]}},"pageContext":{"slug":"/2021-03-17-React array key/"}},
    "staticQueryHashes": ["290286666"]}