{
    "componentChunkName": "component---src-components-post-template-tsx",
    "path": "/blog/ssr-ssg/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p>대략적인 흐름과 내용은 <a href=\"https://medium.com/swlh/the-hitchhikers-guide-to-next-js-fd7aa14ae8d0\">next js 히치하이커를 위한 안내서</a>에서 참고했고, 추가적으로 필요하다고 생각되는 내용을 덧붙였다.</p>\n<p>그 중에서 궁금했던 내용인 <code class=\"language-text\">jsp</code> 와 <code class=\"language-text\">next.js</code> 의 차이점에 대한 이유를 정리해 보려고 한다.</p>\n<p>먼저, 웹이 변화해 왔던 흐름을 이해하는 게 중요하다. 대부분의 변화는 문제를 해결하려고 한 데서 출발하기 때문이다.</p>\n<h2 id=\"웹이-변화해-왔던-흐름을-간단히-요약하자면\" style=\"position:relative;\"><a href=\"#%EC%9B%B9%EC%9D%B4-%EB%B3%80%ED%99%94%ED%95%B4-%EC%99%94%EB%8D%98-%ED%9D%90%EB%A6%84%EC%9D%84-%EA%B0%84%EB%8B%A8%ED%9E%88-%EC%9A%94%EC%95%BD%ED%95%98%EC%9E%90%EB%A9%B4\" aria-label=\"웹이 변화해 왔던 흐름을 간단히 요약하자면 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹이 변화해 왔던 흐름을 간단히 요약하자면,</h2>\n<h3 id=\"1-동적인-웹페이지를-위한-jsp-php-asp\" style=\"position:relative;\"><a href=\"#1-%EB%8F%99%EC%A0%81%EC%9D%B8-%EC%9B%B9%ED%8E%98%EC%9D%B4%EC%A7%80%EB%A5%BC-%EC%9C%84%ED%95%9C-jsp-php-asp\" aria-label=\"1 동적인 웹페이지를 위한 jsp php asp permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 동적인 웹페이지를 위한 JSP, PHP, ASP...</h3>\n<ul>\n<li>서버가 요청에 대한 HTML 을 만들어 내 반환</li>\n<li>일부는 HTML로, 동적이게 보여줘야 하는 부분은 JSP 문법으로 작성할 수 있었음</li>\n<li>요청이 많아질수록 페이지가 로드 되는 시간이 길어짐</li>\n</ul>\n<h3 id=\"2-javascript-와-ajax가-더-복잡한-웹을-만듦\" style=\"position:relative;\"><a href=\"#2-javascript-%EC%99%80-ajax%EA%B0%80-%EB%8D%94-%EB%B3%B5%EC%9E%A1%ED%95%9C-%EC%9B%B9%EC%9D%84-%EB%A7%8C%EB%93%A6\" aria-label=\"2 javascript 와 ajax가 더 복잡한 웹을 만듦 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. javascript 와 ajax가 더 복잡한 웹을 만듦</h3>\n<ul>\n<li><code class=\"language-text\">JavaScript</code> 덕분에 더 상호작용이 많은 웹 페이지가 보편화 됨</li>\n<li><code class=\"language-text\">ajax</code> 를 통해서 화면 깜빡임(reload) 없이 새로운 데이터를 거의 즉시 업데이트 할 수 있게 됨.</li>\n<li>이 때 웹 개발자는 <code class=\"language-text\">jsp</code>, <code class=\"language-text\">javascript</code>, <code class=\"language-text\">css</code> , <code class=\"language-text\">html</code> 이 모두 함께 잘 동작하는지 확인해야 했음</li>\n<li>특히, <code class=\"language-text\">ajax</code>를 통해 데이터를 불러오는 경우엔 <strong>같은 뷰 로직</strong>이 server side에서도 구현되어야 했고, client side에서도 구현되어야 했음... 이 때, 데이터를 공유해야 할 뷰가 많으면 혼돈의 카오스가 시작 됨...</li>\n</ul>\n<h3 id=\"3--개발자에게-좋은-client-side-rendering-와-spa\" style=\"position:relative;\"><a href=\"#3--%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%97%90%EA%B2%8C-%EC%A2%8B%EC%9D%80-client-side-rendering-%EC%99%80-spa\" aria-label=\"3  개발자에게 좋은 client side rendering 와 spa permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.  개발자에게 좋은 <strong>Client-side rendering 와 SPA</strong></h3>\n<ul>\n<li><code class=\"language-text\">JSP</code> 와 같은 신경써야 할 언어가 하나 줄음 (java..)</li>\n<li>사용자가 자신의 컴퓨터에서 코드를 실행하도록 하여 서버의 계산 비용을 절감</li>\n<li>서버 상에서 돌아가는 코드 없이 브라우저에서 js를 실행, URL에 따른 처리도 전부 Client에서 하게 됨(Single Page Application)</li>\n<li>개발자가 주로 JavaScript에 집중할 수 있도록 하기 때문에 생산성에 좋았음</li>\n<li>복잡한 웹을 개발하기 좋았음</li>\n</ul>\n<h3 id=\"4-client-side-rendering-의-문제\" style=\"position:relative;\"><a href=\"#4-client-side-rendering-%EC%9D%98-%EB%AC%B8%EC%A0%9C\" aria-label=\"4 client side rendering 의 문제 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Client-side rendering 의 문제</h3>\n<ul>\n<li>초기 로딩속도가 느림 !\n<ul>\n<li>JavaScript를 다운로드하여 실행하고 JavaScript를 통해 DOM을 조작하는 것은 많이 비용이 듦</li>\n<li>많은 스크립트와 기타 파일(이미지나 CSS)이 동시에 로드되면 로드 시간이 더욱 악화</li>\n<li>특히, 인프라가 좋지 않은 나라일 경우 이 문제가 더욱 더 심해짐</li>\n<li>모바일 웹의 경우는 이 때 충분히 강력하지 않았고 무선 네트워크 속도는 오늘날만큼 크지 않았었음</li>\n</ul>\n</li>\n<li>SEO\n<ul>\n<li>크롤러 봇은 HTML을 스크래핑 함</li>\n<li>Client-side rendering은 비어있는 HTML에 Javascript 로 화면을 그리기 때문에 스크래핑 한 이후에 페이지가 로드됨</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"5-다시-server-side-rendering으로-\" style=\"position:relative;\"><a href=\"#5-%EB%8B%A4%EC%8B%9C-server-side-rendering%EC%9C%BC%EB%A1%9C-\" aria-label=\"5 다시 server side rendering으로  permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 다시 Server-side rendering으로 !</h3>\n<ul>\n<li><code class=\"language-text\">node.js</code>의 발전으로 서버에 javascript 언어를 쓸 수 있게 되면서 다시 서버로 렌더링을 하고자 함</li>\n<li>느렸기 때문에 다시 server side rendering으로 전환해야 했지만, Angular나 React와 같은 프레임워크를 버리고 싶지 않았음</li>\n<li><a href=\"https://reactjs.org/docs/react-dom-server.html\">ReactDOMServer</a> , <a href=\"https://ssr.vuejs.org/\">vue-server-renderer</a>,  <a href=\"https://angular.io/guide/universal\">Angular Universal</a> 와 같은 라이브러리를 쓰면 초기 페이지 로딩에 <code class=\"language-text\">hydration</code> 과정을 도입하여 client side 에서 javascript 가 그릴 HTML을 미리 추출함 → 클라이언트에 초기 HTML 응답을 더 빨리 전달</li>\n<li>추가적으로 <a href=\"https://github.com/ModuleLoader/es-module-loader\">lazy module loading</a>, <a href=\"https://webpack.js.org/guides/code-splitting/\">code splitting</a>, <a href=\"https://webpack.js.org/concepts/\">bundling</a> 도입으로 훨씬 빨라짐</li>\n<li>client side의 hydration을 위한 server-side rendering은 쉽지 않았음</li>\n<li>서버 관리가 필요해짐</li>\n</ul>\n<h3 id=\"6-nextjs-의-static-site-generator\" style=\"position:relative;\"><a href=\"#6-nextjs-%EC%9D%98-static-site-generator\" aria-label=\"6 nextjs 의 static site generator permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. Next.js 의 Static Site Generator?</h3>\n<ul>\n<li><strong>Static Site Generator</strong>\n<ul>\n<li>정적일 수 있는 페이지들의 최적화 -> 사이트의 모든 페이지를 미리 정적으로 만들어버림(동적인 페이지 포함)</li>\n<li>다시 서버가 필요없게 됨</li>\n<li>CDN에서 제공되는 정적 HTML을 사용하면 로드 속도가 상당히 빨라짐</li>\n<li>동적으로 렌더링해야하는 컨텐츠가 많을 경우 빌드시간이 오래걸림</li>\n<li>변경할 내용이 있을 때마다 빌드하고 배포해야 함</li>\n</ul>\n</li>\n<li><strong>Next.js</strong>\n<ul>\n<li>Next.js는 <strong>정적사이트와 동적 사이트를 모두</strong> 잘 처리할 수 있는 페이지 로드 시간에 최적화된 React 프레임워크 (Static-Site Generation, Server-Side Rendering, Client-Side Rendering 모두 지원)</li>\n<li><code class=\"language-text\">/products/1234</code> 와 같은 동적 URL 매개변수를 허용하는 페이지의 경우에도 <strong>Next.js의 incremental 정적 생성 기능</strong> 을 사용하여 런타임에 정적 페이지를 생성 할 수 있음.</li>\n<li>code splitting 자동화 - Bundling 된 파일을 분할해서 로드하여 초기 구동 속도를 빠르게 하고 사용자들에게도 눈에 띄는 성능 향상을 제공</li>\n<li>Vercel에 배포하면 Next.js가 \"그냥 작동함.\" 앱은 전 세계의 서버에 자동으로 배포(CDN)되므로 어디서나 빠르게 로드 됨. Vercel이 자동으로 서버를 관리하므로 사용하지 않는 서버에 대해 비용을 지불하거나 충분한 서버 비용을 지불하지 않아 앱이 느려지는 것에 대해 걱정할 필요가 없음</li>\n</ul>\n</li>\n</ul>\n<br/>\n<br/>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<h3 id=\"jsp\" style=\"position:relative;\"><a href=\"#jsp\" aria-label=\"jsp permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>jsp</h3>\n<ul>\n<li>별도의 서버가 필요함</li>\n<li>요청마다 서버에서 html로 응답, 인터렉션은 client에서 javascript 로 실행</li>\n<li>ajax로 데이터를 불러오는 경우 같은 뷰가 Server와 Client에서 구현이 되었어야 함</li>\n</ul>\n<h3 id=\"nextjs\" style=\"position:relative;\"><a href=\"#nextjs\" aria-label=\"nextjs permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>next.js</h3>\n<ul>\n<li>Serverless(여기서 Serverless는 서버가 없다는 게 아님, 클라우드에 리소스만 할당하고 배포해서 서버에 대한 생각을 할 필요가 없다는 말임)</li>\n<li>SSR (default는 SSG) 와 CSR을 선택적으로 사용\n<ul>\n<li>Static Generation : 빌드 시 HTML 이 생성되고, 각 요청에 사용됨</li>\n<li>Server-side Rendering : 각 요청에 대해 HTML 이 생성</li>\n</ul>\n</li>\n<li>결국, next.js에서 말하는 SSR도 SPA로 동작한다.(특히 SSG 는 빌드 시 만들어진 정적파일로 더 빠르게 응답할 수 있음)</li>\n<li><code class=\"language-text\">empty html</code>의 SPA 형태가 아닌 Server Side에서 <code class=\"language-text\">hydration</code>된 <code class=\"language-text\">html</code>을 SPA로 사용하는 것이다.</li>\n</ul>\n<blockquote>\n<p>여기서 SSG란 static-site generation으로 빌드 시에 prerender 하는 것을 의미한다. default 값이다</p>\n</blockquote>\n<hr>\n<p>이 글을 쓰면서 웹을 구성하는 기술들의 변화를 쭉 훑을 수 있었다. <code class=\"language-text\">JSP</code>와 <code class=\"language-text\">React</code>, <code class=\"language-text\">SSG</code>는 직접 사용하면서 와닿았던 부분이 많아 쉽게 작성할 수 있었다.</p>\n<p>하지만, <code class=\"language-text\">다시 Server-side rendering으로</code> 이 부분은 직접 써 보지 않아 제일 위에 첨부한 링크를 많이 참고했고,\n<code class=\"language-text\">next.js</code>에서 <code class=\"language-text\">SSG</code>와 <code class=\"language-text\">SSR</code>을 선택적으로 사용하는 부분은 직접 구현을 해 봐야 제대로 알 것 같다.\n그리고 <code class=\"language-text\">CDN</code>에 배포했을 때의 빠르기도 직접 구현해 보면서 측정해보면 더 크게 와닿을 것 같다.</p>\n<hr>\n<h2 id=\"참고문서\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%EB%AC%B8%EC%84%9C\" aria-label=\"참고문서 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고문서</h2>\n<p>아 그리고 next.js에서 SSG와 SSR을 언제 사용하면 좋을지에 대한 내용은 공식문서를 참고하면 좋다. 마침 이전에 번역도 해놨다</p>\n<ul>\n<li><a href=\"https://nextjs.org/docs/basic-features/pages#two-forms-of-pre-rendering\">next.js공식문서 - Two forms of Pre-rendering</a></li>\n<li><a href=\"http://localhost:8000/2021-12-08-Nextjs-page-prerender/#summary\">번역 next.js prerender 요약</a></li>\n</ul>\n<p>서버리스에 대한 글</p>\n<ul>\n<li><a href=\"https://velopert.com/3543\">벨로퍼트님 블로그 - 서버리스 아키텍쳐(Serverless)란?</a></li>\n</ul>\n<p>웹개발의 역사를 설명하면서 <code class=\"language-text\">next.js</code>가 탄생하게 된 이유를 설명해준다.</p>\n<ul>\n<li><a href=\"https://medium.com/swlh/the-hitchhikers-guide-to-next-js-fd7aa14ae8d0\">next js 히치하이커를 위한 안내서</a></li>\n</ul>","frontmatter":{"title":"SSR..? SSG..? jsp...? next.js? 뭐가 다른데?","path":"ssr-ssg"},"fields":{"slug":"/2021-12-30-jsp-vs-nextjs/"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#%EC%9B%B9%EC%9D%B4-%EB%B3%80%ED%99%94%ED%95%B4-%EC%99%94%EB%8D%98-%ED%9D%90%EB%A6%84%EC%9D%84-%EA%B0%84%EB%8B%A8%ED%9E%88-%EC%9A%94%EC%95%BD%ED%95%98%EC%9E%90%EB%A9%B4\">웹이 변화해 왔던 흐름을 간단히 요약하자면,</a></p>\n<ul>\n<li><a href=\"#1-%EB%8F%99%EC%A0%81%EC%9D%B8-%EC%9B%B9%ED%8E%98%EC%9D%B4%EC%A7%80%EB%A5%BC-%EC%9C%84%ED%95%9C-jsp-php-asp\">1. 동적인 웹페이지를 위한 JSP, PHP, ASP...</a></li>\n<li><a href=\"#2-javascript-%EC%99%80-ajax%EA%B0%80-%EB%8D%94-%EB%B3%B5%EC%9E%A1%ED%95%9C-%EC%9B%B9%EC%9D%84-%EB%A7%8C%EB%93%A6\">2. javascript 와 ajax가 더 복잡한 웹을 만듦</a></li>\n<li><a href=\"#3--%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%97%90%EA%B2%8C-%EC%A2%8B%EC%9D%80-client-side-rendering-%EC%99%80-spa\">3.  개발자에게 좋은 <strong>Client-side rendering 와 SPA</strong></a></li>\n<li><a href=\"#4-client-side-rendering-%EC%9D%98-%EB%AC%B8%EC%A0%9C\">4. Client-side rendering 의 문제</a></li>\n<li><a href=\"#5-%EB%8B%A4%EC%8B%9C-server-side-rendering%EC%9C%BC%EB%A1%9C-\">5. 다시 Server-side rendering으로 !</a></li>\n<li><a href=\"#6-nextjs-%EC%9D%98-static-site-generator\">6. Next.js 의 Static Site Generator?</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B2%B0%EB%A1%A0\">결론</a></p>\n<ul>\n<li><a href=\"#jsp\">jsp</a></li>\n<li><a href=\"#nextjs\">next.js</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%B0%B8%EA%B3%A0%EB%AC%B8%EC%84%9C\">참고문서</a></p>\n</li>\n</ul>"}}]}},"pageContext":{"slug":"/2021-12-30-jsp-vs-nextjs/"}},
    "staticQueryHashes": ["290286666"]}