{
    "componentChunkName": "component---src-components-post-template-tsx",
    "path": "/blog/react-types/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2 id=\"reactfc-를-사용하지-않는-이유-jsxelement-와-reactnode\" style=\"position:relative;\"><a href=\"#reactfc-%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EC%9D%B4%EC%9C%A0-jsxelement-%EC%99%80-reactnode\" aria-label=\"reactfc 를 사용하지 않는 이유 jsxelement 와 reactnode permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React.FC 를 사용하지 않는 이유, JSX.element 와 ReactNode</h2>\n<p>리액트 타입스크립트 로 함수형 컴포넌트를 작성할 때 이런식으로 React.FunctionalComponent 로 타입을 지정해서 사용하는 것을 많이 볼 수 있을 것이다.</p>\n<p>React.FC란 typescript 에서 함수형 컴포넌트를 사용하기 위해 지원되는 인터페이스 중 하나이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">\n<span class=\"token keyword\">type</span> <span class=\"token class-name\"><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> FunctionComponent<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">FunctionComponent<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> PropsWithChildren<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span> context<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ReactElement<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    propTypes<span class=\"token operator\">?</span><span class=\"token operator\">:</span> WeakValidationMap<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    contextTypes<span class=\"token operator\">?</span><span class=\"token operator\">:</span> ValidationMap<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    defaultProps<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Partial<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n    displayName<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p>React.FC를 사용하면 몇가지 문제점이 있어서 사용하지 않는 것으로 대부분 합의를 본다고 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">\n<span class=\"token keyword\">const</span> TestComponent<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span> test component <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre></div>\n<h3 id=\"-reactfc-reactfunctionalcomponent를-잘-쓰지-않는-이유\" style=\"position:relative;\"><a href=\"#-reactfc-reactfunctionalcomponent%EB%A5%BC-%EC%9E%98-%EC%93%B0%EC%A7%80-%EC%95%8A%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\" reactfc reactfunctionalcomponent를 잘 쓰지 않는 이유 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🤔 React.FC (React.FunctionalComponent)를 잘 쓰지 않는 이유</h3>\n<p><a href=\"https://github.com/facebook/create-react-app/pull/8177\"> 출처: Facebook React FC issue</a></p>\n<h4 id=\"1-children에-대한-암시적-정의-\" style=\"position:relative;\"><a href=\"#1-children%EC%97%90-%EB%8C%80%ED%95%9C-%EC%95%94%EC%8B%9C%EC%A0%81-%EC%A0%95%EC%9D%98-\" aria-label=\"1 children에 대한 암시적 정의  permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. children에 대한 암시적 정의 :</h4>\n<p>​\tReact.FC에는 <code class=\"language-text\">children</code> 이 있다고 가정한다, 내가 children을 의도하지 않았어도 넘겨주면 그대로 들어간다. 이렇게 작성하는 경우 런타임 에러가 나지 않는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> App<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">FC</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/*... */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Example</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token operator\">&lt;</span>App<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Unwanted children<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>App<span class=\"token operator\">></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"2-제네릭을-지원하지-않음\" style=\"position:relative;\"><a href=\"#2-%EC%A0%9C%EB%84%A4%EB%A6%AD%EC%9D%84-%EC%A7%80%EC%9B%90%ED%95%98%EC%A7%80-%EC%95%8A%EC%9D%8C\" aria-label=\"2 제네릭을 지원하지 않음 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 제네릭을 지원하지 않음</h4>\n<p>이런식으로 컴포넌트를 만들 때 제네릭을 사용하는데,</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">GenericComponentProps<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n   prop<span class=\"token operator\">:</span> <span class=\"token constant\">T</span>\n   <span class=\"token function-variable function\">callback</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> GenericComponent <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> GenericComponentProps<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span></code></pre></div>\n<p>React.FC에서는 이런 제네릭을 사용할 수 있는 방법이 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> GenericComponent<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span><span class=\"token comment\">/* ??? */</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>props<span class=\"token operator\">:</span> GenericComponentProps<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"3-defaultprops가-제대로-작동하지-않는다\" style=\"position:relative;\"><a href=\"#3-defaultprops%EA%B0%80-%EC%A0%9C%EB%8C%80%EB%A1%9C-%EC%9E%91%EB%8F%99%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94%EB%8B%A4\" aria-label=\"3 defaultprops가 제대로 작동하지 않는다 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. defaultProps가 제대로 작동하지 않는다</h4>\n<p>es6의 default arguments를 사용하는게 더 나을 수도 있다,,하지만,, defaultProps를 적용한 예시를 보면 이렇게 함수형 컴포넌트에 적용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">TestProps</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TestComponent</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> age <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> TestProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>age<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nTestComponent<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> age<span class=\"token operator\">:</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Example</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>TestComponent name<span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이거를 그대로 React.FC로 바꾸면 에러가 난다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">TestProps</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  age<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> TestComponent<span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span><span class=\"token constant\">FC</span><span class=\"token operator\">&lt;</span>TestProps<span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> age <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>age<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nTestComponent<span class=\"token punctuation\">.</span>defaultProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> age<span class=\"token operator\">:</span> <span class=\"token number\">20</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Example</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>TestComponent name<span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//compile error</span></code></pre></div>\n<h3 id=\"그렇다면-어떻게-써야할까-jsxelement-reactreactnode-reactelement\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%8D%A8%EC%95%BC%ED%95%A0%EA%B9%8C-jsxelement-reactreactnode-reactelement\" aria-label=\"그렇다면 어떻게 써야할까 jsxelement reactreactnode reactelement permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그렇다면 어떻게 써야할까? JSX.Element? React.ReactNode? ReactElement?</h3>\n<p>관련 커뮤니티나 react typescript cheatSheet 등을 보면 대부분 <code class=\"language-text\">JSX.Element</code> 를 리턴타입으로 지정해서 쓰라고 한다.</p>\n<p>(하지만 JSX.Element를 사용하면 null은 반환이 안되기 때문에 )</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">AppProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> \n\n<span class=\"token comment\">// 컴포넌트를 정의하는 가장 쉬운 방법, 함수형 컴포넌트가 타입을 유추한다.</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> message <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> AppProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 리턴 타입을 설정할 수 있고, 리턴타입이 아니면 에러가 난다.</span>\n<span class=\"token keyword\">const</span> App <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> message <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> AppProps<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>Element <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 인라인으로 타입을 선언할 수 있다. interface 를 선언하지 않아도 되지만 반복되는 것 처럼 보인다.</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> message <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> message<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://github.com/typescript-cheatsheets/react\">출처 - typescript cheatsheets</a></p>\n<h3 id=\"찬찬히-살펴보면\" style=\"position:relative;\"><a href=\"#%EC%B0%AC%EC%B0%AC%ED%9E%88-%EC%82%B4%ED%8E%B4%EB%B3%B4%EB%A9%B4\" aria-label=\"찬찬히 살펴보면 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>찬찬히 살펴보면</h3>\n<ol>\n<li>\n<p><u>클래스형 컴포넌트</u>는 ReactNode를 리턴한다.</p>\n<ul>\n<li>reactNode는 이런 타입이다</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ReactText</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ReactChild</span> <span class=\"token operator\">=</span> ReactElement <span class=\"token operator\">|</span> ReactText<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ReactNodeArray</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">Array</span><span class=\"token operator\">&lt;</span>ReactNode<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ReactFragment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">|</span> ReactNodeArray<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">ReactNode</span> <span class=\"token operator\">=</span> ReactChild <span class=\"token operator\">|</span> ReactFragment <span class=\"token operator\">|</span> ReactPortal <span class=\"token operator\">|</span> <span class=\"token builtin\">boolean</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p><u>함수형 컴포넌트</u>는 ReactElement를 리턴한다.</p>\n</li>\n<li>\n<p>JSX는 바벨에 의해서 <strong>React.createElement(component, props, ...children)</strong> 함수로 트랜스파일된다</p>\n<p>이런식으로 트랜스파일 되기 때문에 JSX와 ReactElement는 거의 동일하다고 보면 된다고 한다. 그래도 하나하나 뜯어보자</p>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> jsx <span class=\"token operator\">=</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>hello<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token keyword\">const</span> ele <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//transpilation</span></code></pre></div>\n<ul>\n<li>JSX.Element\n<ul>\n<li>리액트 코드를 열어보니 ReactElement의 props와 type이 any인 제네릭 타입을 가진 React.ReactElement 이다. 그리고 global 영역에 정의되어 있어 외부에서 변경이 가능하다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">declare</span> global <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">namespace</span> <span class=\"token constant\">JSX</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Element</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React</span><span class=\"token punctuation\">.</span>ReactElement<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>ReactElement\n<ul>\n<li>reactElement는 type, props 를 가진 객체이다</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\">\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Key</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ReactElement<span class=\"token operator\">&lt;</span><span class=\"token constant\">P</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> JSXElementConstructor<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">|</span> JSXElementConstructor<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token operator\">>></span></span> <span class=\"token punctuation\">{</span>\n        type<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n        props<span class=\"token operator\">:</span> <span class=\"token constant\">P</span><span class=\"token punctuation\">;</span>\n        key<span class=\"token operator\">:</span> Key <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>이런식으로 보면 이해하기 쉽다</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"> <span class=\"token operator\">&lt;</span>p<span class=\"token operator\">></span> <span class=\"token comment\">// &lt;- ReactElement = JSX.Element</span>\n   <span class=\"token operator\">&lt;</span>Custom<span class=\"token operator\">></span> <span class=\"token comment\">// &lt;- ReactElement = JSX.Element</span>\n     <span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">\"test\"</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// &lt;- ReactNode</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Custom<span class=\"token operator\">></span>\n <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></code></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/51187540/128668765-237f716d-1a0d-4e3f-ba28-c5a3508d476f.png\" alt=\"image\"></p>\n<p>사진출처:  <a href=\"https://simsimjae.tistory.com/426\">https://simsimjae.tistory.com/426</a> [104%]</p>\n<p><br/><br/></p>\n<h3 id=\"-왜-클래스형-컴포넌트는-code-classlanguage-texttypescriptnodecode-를-리턴하고-함수형-컴포넌트는-code-classlanguage-texttypescriptelementcode-를-리턴할까-\" style=\"position:relative;\"><a href=\"#-%EC%99%9C-%ED%81%B4%EB%9E%98%EC%8A%A4%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%8A%94-code-classlanguage-texttypescriptnodecode-%EB%A5%BC-%EB%A6%AC%ED%84%B4%ED%95%98%EA%B3%A0-%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%8A%94-code-classlanguage-texttypescriptelementcode-%EB%A5%BC-%EB%A6%AC%ED%84%B4%ED%95%A0%EA%B9%8C-\" aria-label=\" 왜 클래스형 컴포넌트는 code classlanguage texttypescriptnodecode 를 리턴하고 함수형 컴포넌트는 code classlanguage texttypescriptelementcode 를 리턴할까  permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>😱 왜 클래스형 컴포넌트는 <code class=\"language-text\">typescriptnode</code> 를 리턴하고 함수형 컴포넌트는 <code class=\"language-text\">typescriptElement</code> 를 리턴할까 ,,,?</h3>\n<ul>\n<li>\n<p>TS class  : React/JS보다 더 큰 범위인 ReactNode를 <code class=\"language-text\">render()</code> 함수에서 반환</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> ReactNode<span class=\"token punctuation\">;</span> <span class=\"token comment\">//이렇게 정의되어 있다 </span></code></pre></div>\n</li>\n<li>\n<p>TS functional : React/JS보다 더 제한적인 JSX.Element | null 을 반환</p>\n</li>\n</ul>\n<p><br/><br/><br/></p>\n<h2 id=\"그래서-결론\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EA%B2%B0%EB%A1%A0\" aria-label=\"그래서 결론 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🚦그래서 결론</h2>\n<h3 id=\"위에서-나열한-fc의-문제가-있으니-jsxelement를-리턴타입으로-사용하도록-하고-null을-리턴해야-할-때에는-이렇게-쓰도록-하자\" style=\"position:relative;\"><a href=\"#%EC%9C%84%EC%97%90%EC%84%9C-%EB%82%98%EC%97%B4%ED%95%9C-fc%EC%9D%98-%EB%AC%B8%EC%A0%9C%EA%B0%80-%EC%9E%88%EC%9C%BC%EB%8B%88-jsxelement%EB%A5%BC-%EB%A6%AC%ED%84%B4%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8F%84%EB%A1%9D-%ED%95%98%EA%B3%A0-null%EC%9D%84-%EB%A6%AC%ED%84%B4%ED%95%B4%EC%95%BC-%ED%95%A0-%EB%95%8C%EC%97%90%EB%8A%94-%EC%9D%B4%EB%A0%87%EA%B2%8C-%EC%93%B0%EB%8F%84%EB%A1%9D-%ED%95%98%EC%9E%90\" aria-label=\"위에서 나열한 fc의 문제가 있으니 jsxelement를 리턴타입으로 사용하도록 하고 null을 리턴해야 할 때에는 이렇게 쓰도록 하자 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>위에서 나열한 FC의 문제가 있으니 JSX.Element를 리턴타입으로 사용하도록 하고 Null을 리턴해야 할 때에는 이렇게 쓰도록 하자</h3>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> TestComponent <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> age <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> TestProps<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span>Element <span class=\"token operator\">|</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>age<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Return type을 선언하지 않았을 때도vscode가  JSX.Element로 추론해주는 것을 볼 수 있다</p>\n<p><img src=\"https://user-images.githubusercontent.com/51187540/128818914-e8733201-32d3-47ea-a8ba-a469e9bf2ff0.png\" alt=\"image\"></p>\n<p>출처:<a href=\"https://stackoverflow.com/questions/58123398/when-to-use-jsx-element-vs-reactnode-vs-reactelement?rq=1\">https://stackoverflow.com/questions/58123398/when-to-use-jsx-element-vs-reactnode-vs-reactelement?rq=1</a></p>\n<p><a href=\"https://stackoverflow.com/questions/58123398/when-to-use-jsx-element-vs-reactnode-vs-reactelement/59840095#59840095\">https://stackoverflow.com/questions/58123398/when-to-use-jsx-element-vs-reactnode-vs-reactelement/59840095#59840095</a></p>","frontmatter":{"title":"React.FC 를 사용하지 않는 이유, JSX.element 와 ReactNode","path":"react-types"},"fields":{"slug":"/2021-08-10-React.FC를 사용하지 않는 이유/"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#reactfc-%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-%EC%9D%B4%EC%9C%A0-jsxelement-%EC%99%80-reactnode\">React.FC 를 사용하지 않는 이유, JSX.element 와 ReactNode</a></p>\n<ul>\n<li>\n<p><a href=\"#-reactfc-reactfunctionalcomponent%EB%A5%BC-%EC%9E%98-%EC%93%B0%EC%A7%80-%EC%95%8A%EB%8A%94-%EC%9D%B4%EC%9C%A0\">🤔 React.FC (React.FunctionalComponent)를 잘 쓰지 않는 이유</a></p>\n<ul>\n<li><a href=\"#1-children%EC%97%90-%EB%8C%80%ED%95%9C-%EC%95%94%EC%8B%9C%EC%A0%81-%EC%A0%95%EC%9D%98-\">1. children에 대한 암시적 정의 :</a></li>\n<li><a href=\"#2-%EC%A0%9C%EB%84%A4%EB%A6%AD%EC%9D%84-%EC%A7%80%EC%9B%90%ED%95%98%EC%A7%80-%EC%95%8A%EC%9D%8C\">2. 제네릭을 지원하지 않음</a></li>\n<li><a href=\"#3-defaultprops%EA%B0%80-%EC%A0%9C%EB%8C%80%EB%A1%9C-%EC%9E%91%EB%8F%99%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94%EB%8B%A4\">3. defaultProps가 제대로 작동하지 않는다</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B7%B8%EB%A0%87%EB%8B%A4%EB%A9%B4-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%8D%A8%EC%95%BC%ED%95%A0%EA%B9%8C-jsxelement-reactreactnode-reactelement\">그렇다면 어떻게 써야할까? JSX.Element? React.ReactNode? ReactElement?</a></p>\n</li>\n<li>\n<p><a href=\"#%EC%B0%AC%EC%B0%AC%ED%9E%88-%EC%82%B4%ED%8E%B4%EB%B3%B4%EB%A9%B4\">찬찬히 살펴보면</a></p>\n</li>\n<li>\n<p><a href=\"#-%EC%99%9C-%ED%81%B4%EB%9E%98%EC%8A%A4%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%8A%94-code-classlanguage-texttypescriptnodecode-%EB%A5%BC-%EB%A6%AC%ED%84%B4%ED%95%98%EA%B3%A0-%ED%95%A8%EC%88%98%ED%98%95-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%8A%94-code-classlanguage-texttypescriptelementcode-%EB%A5%BC-%EB%A6%AC%ED%84%B4%ED%95%A0%EA%B9%8C-\">😱 왜 클래스형 컴포넌트는 <code class=\"language-text\">typescriptnode</code> 를 리턴하고 함수형 컴포넌트는 <code class=\"language-text\">typescriptElement</code> 를 리턴할까 ,,,?</a></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EA%B7%B8%EB%9E%98%EC%84%9C-%EA%B2%B0%EB%A1%A0\">🚦그래서 결론</a></p>\n<ul>\n<li><a href=\"#%EC%9C%84%EC%97%90%EC%84%9C-%EB%82%98%EC%97%B4%ED%95%9C-fc%EC%9D%98-%EB%AC%B8%EC%A0%9C%EA%B0%80-%EC%9E%88%EC%9C%BC%EB%8B%88-jsxelement%EB%A5%BC-%EB%A6%AC%ED%84%B4%ED%83%80%EC%9E%85%EC%9C%BC%EB%A1%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8F%84%EB%A1%9D-%ED%95%98%EA%B3%A0-null%EC%9D%84-%EB%A6%AC%ED%84%B4%ED%95%B4%EC%95%BC-%ED%95%A0-%EB%95%8C%EC%97%90%EB%8A%94-%EC%9D%B4%EB%A0%87%EA%B2%8C-%EC%93%B0%EB%8F%84%EB%A1%9D-%ED%95%98%EC%9E%90\">위에서 나열한 FC의 문제가 있으니 JSX.Element를 리턴타입으로 사용하도록 하고 Null을 리턴해야 할 때에는 이렇게 쓰도록 하자</a></li>\n</ul>\n</li>\n</ul>"}}]}},"pageContext":{"slug":"/2021-08-10-React.FC를 사용하지 않는 이유/"}},
    "staticQueryHashes": ["290286666"]}