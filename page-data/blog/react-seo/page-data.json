{
    "componentChunkName": "component---src-components-post-template-tsx",
    "path": "/blog/react-seo/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<h2 id=\"react-seo-적용\" style=\"position:relative;\"><a href=\"#react-seo-%EC%A0%81%EC%9A%A9\" aria-label=\"react seo 적용 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React SEO 적용</h2>\n<h3 id=\"spasingle-page-application에서-seosearch-engine-optimization를-적용하는-방법\" style=\"position:relative;\"><a href=\"#spasingle-page-application%EC%97%90%EC%84%9C-seosearch-engine-optimization%EB%A5%BC-%EC%A0%81%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"spasingle page application에서 seosearch engine optimization를 적용하는 방법 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SPA(Single Page Application)에서 SEO(Search Engine Optimization)를 적용하는 방법</h3>\n<p>SPA에서 SEO를 적용하는 방법은 생각보다 까다롭습니다. CSR으로 자바스크립트로 html을 동적으로 렌더링 해서 페이지를 보여주는데, 크롤러 봇은 javascript 로 렌더링 하기 전의 html의 정보들을 가져옵니다.</p>\n<p>그래서</p>\n<ol>\n<li>\n<p>SSR 로 마이그레이션을 하던가,</p>\n</li>\n<li>\n<p>prerender 를 사용하여야 합니다.</p>\n<p>여기서 prerender란 페이지 요청을 낚아채어 사용자가 크롤러인지 여부를 확인하여 크롤러인 경우 캐시 된 버전의 페이지를 전달하여 줍니다. 반대로 크롤러가 아니라면 일반적인 페이지를 전달해주게 됩니다.</p>\n<p><a href=\"https://www.netlify.com/blog/2016/11/22/prerendering-explained/\">netilify - prerendering 에 대한 설명</a></p>\n</li>\n</ol>\n<h2 id=\"react-helmet-으로-동적-적용\" style=\"position:relative;\"><a href=\"#react-helmet-%EC%9C%BC%EB%A1%9C-%EB%8F%99%EC%A0%81-%EC%A0%81%EC%9A%A9\" aria-label=\"react helmet 으로 동적 적용 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React-Helmet 으로 동적 적용</h2>\n<p><code class=\"language-text\">yarn add react-helmet-async</code></p>\n<p>SEO를 적용할 컴포넌트를 만듭니다.</p>\n<p>언어에 따라 title, description, 선택한 이미지에 따라 이미지가  바뀌게 고려를 해야했기 때문에 파라미터로 넘겨주었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">\nimport { Helmet } from &#39;react-helmet-async&#39;;\n\n\n\nconst SEO = ({\n  pageUrl = &#39;/&#39;,\n  metaImage = `${process.env.PUBLIC_URL}main_img.jpg,\n}: SEOProps): JSX.Element =&gt; {\n  const { language } = useClientState();\n  const title = &#39;garden.log&#39;;\n  const description =\n    &#39;onethegarden blog&#39;;\n  return (\n    &lt;Helmet\n      title={title}\n      htmlAttributes={{ lang: language }}\n      meta={[\n        // Google Meta Tags\n        { itemProp: &#39;name&#39;, content: title },\n        { itemProp: &#39;description&#39;, content: description },\n        { itemProp: &#39;image&#39;, content: metaImage },\n        // Facebook Meta Tags\n        {\n          property: &#39;og:url&#39;,\n          content: `https://www.onethegarden.io${pageUrl}`,\n        },\n        {\n          property: &#39;og:type&#39;,\n          content: &#39;website&#39;,\n        },\n        //...이하 적용할 내용들\n      ]}\n    /&gt;\n  );\n};\n\nexport default SEO;</code></pre></div>\n<p>이렇게 적용을 해서 필요한 페이지마다 SEO 컴포넌트를 넣어줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">const LoginPage = (): JSX.Element =&gt; {\n  const location = useLocation();\n  return (\n    &lt;&gt;\n      &lt;SEO pageUrl={location.pathname} title={&#39;login&#39;} .../&gt;\n      &lt;Header /&gt;\n      &lt;LoginTemplate&gt;\n        &lt;Login /&gt;\n      &lt;/LoginTemplate&gt;\n      &lt;Footer /&gt;\n    &lt;/&gt;\n  );\n};\n</code></pre></div>\n<p>이렇게 적용하고 확인해보면 이런식으로 적용되어 있는 것을 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>og:type<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>website<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-rh</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>og:title<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>garden.log<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-rh</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>og:description<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>onethegarden blog<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-rh</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>og:image:height<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>256<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-rh</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>og:image:width<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>256<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-rh</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">property</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>og:image:height<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>256<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-rh</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>true<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\n... </code></pre></div>\n<p>여기까지 해서 메타데이터를 미리 볼수 있는 사이트인 <a href=\"https://www.heymeta.com/\">https://www.heymeta.com/</a> 에서 확인할 수 있습니다.</p>\n<p>html에 적용한 메타데이터들만 읽히고 react-helmet으로 위에서 설정해준 정보들이 잡히지 않은 것을 볼 수 있습니다. (로컬에서 띄운 서버를 외부에서 접근하기 위해 ngrok을 사용하였습니다.)</p>\n<h2 id=\"react-snap-적용\" style=\"position:relative;\"><a href=\"#react-snap-%EC%A0%81%EC%9A%A9\" aria-label=\"react snap 적용 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React-Snap 적용</h2>\n<p>그래서 이제 <code class=\"language-text\">react-snap</code>을 적용해 줍니다.</p>\n<p><code class=\"language-text\">yarn add react-snap</code></p>\n<p>react-snap은 웹 앱을 정적 HTML로 미리 렌더링합니다. <a href=\"https://github.com/stereobooster/react-snap\">react-snap</a></p>\n<p>먼저 빌드가 완료된 후 크롤링 할 수 있도록 package.json에 값을 추가해 줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    ...<span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"postbuild\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-snap\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>Index.tsx 도 수정해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"react\"><pre class=\"language-react\"><code class=\"language-react\">\nconst rootElement = document.getElementById(&#39;root&#39;);\nconst app = (\n  &lt;React.StrictMode&gt;\n    &lt;BrowserRouter&gt;\n      &lt;HelmetProvider&gt;\n        &lt;App /&gt;\n      &lt;/HelmetProvider&gt;\n    &lt;/BrowserRouter&gt;\n  &lt;/React.StrictMode&gt;\n);\n\nif (rootElement?.hasChildNodes()) {\n  hydrate(app, rootElement);\n} else {\n  render(app, rootElement);\n}</code></pre></div>\n<p>hydrate는 렌더링은 하지 않고 이벤트 핸들러만 붙여줍니다. markup 이 있는 경우 렌더링 할 필요가 없기 때문입니다.</p>\n<p>이 과정을 생략해도 되지만, 앱을 구동하는데 시간이 좀 더 걸린다고 합니다.</p>\n<p>이제 빌드를 해보면 react-snap이 실행됩니다</p>\n<p><code class=\"language-text\">npm run build</code> 으로 빌드를 해주고</p>\n<p><code class=\"language-text\">npx serve ./build</code> 로 빌드된 내용을 로컬에서 띄워줍니다.</p>\n<p>그리고 ngrok.io에서 띄운 링크를 HEY META 사이트에서 확인해보면 잘 적용이 된 것을 확인할 수 있습니다</p>\n<p>하지만 이렇게 하면 메인 페이지에만 적용이 되기 때문에</p>\n<p>Package.json에 적용할 페이지들을 명시해 줘야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\"scripts\": {\n  \"postbuild\": \"react-snap\"\n},\n  \"reactSnap\": { \n      \"include\": [ \"/\", \"/blog\", \"/bloglist\" ] \n   },\n}</code></pre></div>","frontmatter":{"title":"React SEO 적용","path":"react-seo"},"fields":{"slug":"/2021-08-18-SEO최적화/"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#react-seo-%EC%A0%81%EC%9A%A9\">React SEO 적용</a></p>\n<ul>\n<li><a href=\"#spasingle-page-application%EC%97%90%EC%84%9C-seosearch-engine-optimization%EB%A5%BC-%EC%A0%81%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\">SPA(Single Page Application)에서 SEO(Search Engine Optimization)를 적용하는 방법</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#react-helmet-%EC%9C%BC%EB%A1%9C-%EB%8F%99%EC%A0%81-%EC%A0%81%EC%9A%A9\">React-Helmet 으로 동적 적용</a></p>\n</li>\n<li>\n<p><a href=\"#react-snap-%EC%A0%81%EC%9A%A9\">React-Snap 적용</a></p>\n</li>\n</ul>"}}]}},"pageContext":{"slug":"/2021-08-18-SEO최적화/"}},
    "staticQueryHashes": ["290286666"]}