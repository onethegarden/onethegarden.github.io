{
    "componentChunkName": "component---src-components-post-template-tsx",
    "path": "/2021-06-25-Programers JavascriptStudy/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<blockquote>\n<p>프로그래머스 자바스크립트 스터디에서 배운 것들과 정보들을 정리하고자 한다.</p>\n</blockquote>\n<p><br/><br/><br/><br/><br/><br/></p>\n<h2 id=\"시작-전-참고자료\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%9E%91-%EC%A0%84-%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\" aria-label=\"시작 전 참고자료 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시작 전 참고자료</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Learn/JavaScript/First_steps\">JavaScript 첫걸음</a> - MDN의 자바스크립트 입문 문서</li>\n<li><a href=\"https://developer.mozilla.org/ko/docs/A_re-introduction_to_JavaScript\">JavaScript 재입문하기</a> - 오해받고 있는? 자바스크립트에 대해 짧게 요약해둔 문서 ( 잘 모르고 쓰면 오류가 나는 부분들을 다시 짚어보자)</li>\n<li><a href=\"https://d2.naver.com/helloworld/59361\">브라우저는 어떻게 동작하는가?</a> - 브라우저의 동작에 대한 글</li>\n<li><a href=\"https://joshua1988.github.io/web-development/javascript/javascript-asynchronous-operation/\">자바스크립트의 비동기 처리와 콜백함수</a> - 자바스크립트의 비동기 처리에 대한 블로그 글</li>\n<li><a href=\"https://wit.nts-corp.com/2019/02/14/5522\">DOM은 무엇일까?</a> - DOM에 대해 정리해둔 아티클</li>\n</ul>\n<p><br/><br/><br/><br/></p>\n<h2 id=\"책-추천\" style=\"position:relative;\"><a href=\"#%EC%B1%85-%EC%B6%94%EC%B2%9C\" aria-label=\"책 추천 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>책 추천</h2>\n<ul>\n<li>더글라스 크락포드의 자바스크립트 핵심가이드 - 더글라스 크락포드</li>\n<li>자바스크립트는 왜 그 모양일까? - 더글라스 크락포드</li>\n<li>자바스크립트 성능 최적화 - 니콜라스 자카스</li>\n<li>모던 자바스크립트 - 니콜라스 자카스 (es6문법 이해하는데 좋음)</li>\n<li>읽기 좋은 자바스크립트 코딩 기법 - 니콜라스 자카스</li>\n<li>you don't know js - 중급자에게 추천</li>\n</ul>\n<p><br/><br/><br/><br/></p>\n<h2 id=\"코드관련\" style=\"position:relative;\"><a href=\"#%EC%BD%94%EB%93%9C%EA%B4%80%EB%A0%A8\" aria-label=\"코드관련 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드관련</h2>\n<ol>\n<li>\n<p><strong>EOL (End of line)</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/51187540/123635773-01ddce80-d857-11eb-8ffe-df2f9535d2ad.png\" alt=\"image\"></p>\n<ul>\n<li>\n<p>GitHub에서 이런 표시를 볼 수 있을 것이다.</p>\n<p>new line으로 끝나지 않은 행은 실제 행으로 간주되지 않을수도 있다. 항상 맨 아래에 비어있는 행을 추가하여 파일이 끝났음을 알려주어야 한다. POSIX명세에 이렇게 써있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">3.206 Line\nA sequence of zero or more non- &lt;newline> characters plus a terminating &lt;newline> character.</code></pre></div>\n<p>prettier를 통해 저장시 자동으로 이 행이 추가되게 설정할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n  \"endOfLine\": \"auto\",\n}</code></pre></div>\n</li>\n</ul>\n</li>\n</ol>\n<p><br/><br/></p>\n<ol start=\"2\">\n<li>\n<p><strong>단축평가, truthy, falsy 의 위험성</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">if(!data) return;</code></pre></div>\n<ul>\n<li>js는 타입이 없어서 이런식으로 에러를 던지면 의도치 않은 동작이 발생할 수 있음.</li>\n<li>null 체크는 lodash의 isNil을 참고</li>\n</ul>\n</li>\n</ol>\n<p><br/><br/></p>\n<ol start=\"3\">\n<li><strong>변수명</strong>\n<ul>\n<li>줄임말을 사용하지 말자 Nm은 Name인지 Nanometer 인지 New Mexico인지 쓰는사람 말고는 모른다</li>\n<li>누구나 보고 최대한 이해하기 쉽게 설명적으로 작성하기</li>\n<li><a href=\"https://www.robinwieruch.de/javascript-naming-conventions\">Javascript Naming Convention</a></li>\n</ul>\n</li>\n</ol>\n<p><br/><br/></p>\n<ol start=\"4\">\n<li><strong>비동기 처리</strong></li>\n</ol>\n<ul>\n<li>\n<p>저수준에서 발생시키고 고수준에서 처리 <code class=\"language-text\">callee</code>에서 발생, <code class=\"language-text\">caller</code>에서 처리</p>\n<ul>\n<li>\n<p>예시코드</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// api.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">request</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> response <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'FAKE_URL'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>response<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// index.js</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">HTTP_STATUS_CODE</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">OK</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">BAD_REQUEST</span><span class=\"token operator\">:</span> <span class=\"token number\">400</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">NOT_FOUND</span><span class=\"token operator\">:</span> <span class=\"token number\">404</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">SERVER_ERROR</span><span class=\"token operator\">:</span> <span class=\"token number\">500</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> someData <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">request</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">case</span> <span class=\"token constant\">HTTP_STATUS_CODE</span><span class=\"token punctuation\">.</span><span class=\"token constant\">BAD_REQUEST</span><span class=\"token operator\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'잘못된 요청이'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token constant\">HTTP_STATUS_CODE</span><span class=\"token punctuation\">.</span><span class=\"token constant\">NOT_FOUND</span><span class=\"token operator\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'찾는 데이터가 없음'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">case</span> <span class=\"token constant\">HTTP_STATUS_CODE</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SERVER_ERROR</span><span class=\"token operator\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'서버 에러'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">에러: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>e<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"http://latentflip.com/loupe/?code=JC5vbignYnV0dG9uJywgJ2NsaWNrJywgZnVuY3Rpb24gb25DbGljaygpIHsKICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gdGltZXIoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ1lvdSBjbGlja2VkIHRoZSBidXR0b24hJyk7ICAgIAogICAgfSwgMjAwMCk7Cn0pOwoKY29uc29sZS5sb2coIkhpISIpOwoKc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0KCkgewogICAgY29uc29sZS5sb2coIkNsaWNrIHRoZSBidXR0b24hIik7Cn0sIDUwMDApOwoKY29uc29sZS5sb2coIldlbGNvbWUgdG8gbG91cGUuIik7!!!PGJ1dHRvbj5DbGljayBtZSE8L2J1dHRvbj4%3D\">비동기함수와 일반함수, 비동기 함수의 callback 시각화</a></p>\n</li>\n</ul>\n<p><br/><br/></p>\n<ol start=\"5\">\n<li><strong>시멘틱 태그, HTML의 중요성</strong></li>\n</ol>\n<ul>\n<li>\n<p>크롤러가 우리가 만든 사이트를 크롤링 해갈 때 HTML 코드만으로 그 의미를 인지하기 때문에 Semantic요소를 해석한다.</p>\n</li>\n<li>\n<p>웹은 누구나 이용 가능해야 한다.</p>\n</li>\n<li>\n<p><a href=\"https://www.semrush.com/blog/semantic-html5-guide/?kw=&#x26;cmp=EA_SRCH_DSA_Blog_SEO_EN&#x26;label=dsa_pagefeed&#x26;Network=g&#x26;Device=c&#x26;utm_content=431603845883&#x26;kwid=dsa-834686684576&#x26;cmpid=9874915430&#x26;gclid=Cj0KCQjwhZr1BRCLARIsALjRVQMALQ-PFX7NKeCiHJWm3AkRMnvnh5f6j9gz2Dqpik6RZZmo0Akzst8aAkdLEALw_wcB\">시멘틱 웹이란?</a></p>\n<ul>\n<li>HTML의 시멘틱 태그에 대한 글, 시멘틱 웹이 왜 필요한지, 태그의 구조 등</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://developers.facebook.com/docs/sharing/webmasters/#testing\">facebook 에 공유하는 문서 최적화</a></p>\n<ul>\n<li>데스크톱, 모바일 웹, 모바일 앱 등 공유된 위치와 관계없이 Facebook에 공유하는 웹 호스팅된 콘텐츠를 최적화하는 방법</li>\n<li>시멘틱 태그가 중요한 이유</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://developers.google.com/search/docs/beginner/seo-starter-guide\">구글검색 최적화</a></p>\n<ul>\n<li>구글 크롤러에 웹페이지 최적화 시키는 방법</li>\n<li>시멘틱 태그가 중요한 이유</li>\n</ul>\n</li>\n</ul>\n<p><br/><br/><br/></p>\n<h2 id=\"인사이트\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%82%AC%EC%9D%B4%ED%8A%B8\" aria-label=\"인사이트 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인사이트</h2>\n<ul>\n<li>\n<p><a href=\"https://ko.reactjs.org/docs/thinking-in-react.html\">리액트처럼 사고하기 </a></p>\n<ul>\n<li>vanilla js로 리액트스럽게? 설계를 하고 싶을 때 참고하면 좋을 문서, component를 나누고 state를 어떻게 관리할지 참고할 수 있다.</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/constructing-the-object-model\">구글 - 브라우저의 렌더링 순서</a></p>\n<ul>\n<li>ex) 브라우저 주소창에 <a href=\"http://www.naver.com%EC%9D%84\">www.naver.com을</a> 쳤을 때 화면이 뜨기까지 설명하세요가 <strong>면접 단골질문</strong>이므로 숙지하도록 하자 ! (Render-tree Construction, Layout, and Paint 까지는 필수로 읽어보기)</li>\n<li><a href=\"https://d2.naver.com/helloworld/59361\">네이버 - 브라우저는 어떻게 동작하는가</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://gist.github.com/paulirish/5d52fb081b3570c81e3a\">브라우저의 Reflow</a></p>\n<ul>\n<li>브라우저의 relflow를 유발하는 요소들에 대한 설명</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://www.python.org/dev/peps/pep-0350/#id22\">파이썬 - CodeTags</a></p>\n<ul>\n<li>주석을 달 때 TODO, FIXME, HACK 와 같은 키워드랑 같이 써서 전체검색해서 고치는 시간을 갖는 것도 좋다</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://pomb.us/build-your-own-react/\">리액트 만들기 튜토리얼</a></p>\n<ul>\n<li>일단,, 사이트가 좋아보인다 스크롤에 반응해 코드가 나타나고 사라진다,,,다른 분이 슬랙에서 이 코드를 보고 Hook의 내부원리를 이해하는데 도움이 되었다고 한다!</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://github.com/pankod/superplate\">Frontend boilerplate</a></p>\n<ul>\n<li>여러 종류의 boilerplate</li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://developer.chrome.com/docs/devtools/memory-problems/heap-snapshots/\">크롬 extension - record heap snapshot</a></p>\n<p>​</p>\n</li>\n</ul>\n<p><br/><br/><br/></p>\n<h2 id=\"커뮤니티\" style=\"position:relative;\"><a href=\"#%EC%BB%A4%EB%AE%A4%EB%8B%88%ED%8B%B0\" aria-label=\"커뮤니티 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>커뮤니티</h2>\n<ul>\n<li><a href=\"http://prography.org/\">프로그라피</a> : 프로그래머와 디자이너의 모임, 팀별 프로젝트로 서비스 기획 및 배포</li>\n<li><a href=\"https://dnd.ac/\">https://dnd.ac/</a> : 개발자와 디자이너가 함께 프로젝트 진행</li>\n<li><a href=\"https://medium.com/@dddstudy1\">DDD</a> : 개발자, 디자이너가 함께 프로젝트 진행</li>\n<li><a href=\"https://velog.io/@prayme/%EB%8C%80%ED%95%99%EC%83%9D-IT-%EC%97%B0%ED%95%A9-%EB%8F%99%EC%95%84%EB%A6%AC-%EC%A0%95%EB%B3%B4-%EB%AA%A8%EC%9D%8C-feat.-RUFree-%EC%A3%BC%EB%8B%88%EC%96%B4\">그 이외의 정보</a></li>\n</ul>\n<p><br/><br/><br/></p>\n<h2 id=\"사전퀴즈\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%A0%84%ED%80%B4%EC%A6%88\" aria-label=\"사전퀴즈 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사전퀴즈</h2>\n<ul>\n<li>\n<p>1번 문제 - new</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> tabby1 <span class=\"token operator\">=</span> <span class=\"token function\">Cat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'nana'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tabby1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//출력되는 값은?</span></code></pre></div>\n<blockquote>\n<p>🔑 오류가 발생한다.</p>\n</blockquote>\n<p><code class=\"language-text\">apply</code>, <code class=\"language-text\">call</code>, <code class=\"language-text\">bind</code> 등으로 <code class=\"language-text\">this</code>에 대해 주입한 상황이 아니고 <strong><code class=\"language-text\">new</code> 키워드없이</strong> 실행한 함수 내 this는 전역 객체(window)를 바라보기 때문에 에러가 발생</p>\n<p><code class=\"language-text\">new</code>를 붙이지 않았을 때 에러처리 필요 -> <code class=\"language-text\">new.target</code>으로 확인 가능!</p>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>2번 문제 - 즉시실행함수</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token string\">'roto'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>🔑 <code class=\"language-text\">hello roto</code>가 출력된다.</p>\n</blockquote>\n<p>즉시실행함수 (IIFE, Immediately Invoked Function Expression) 이 함수를 정의함과 동시에 실행되기 때문에</p>\n<p>즉시실행함수 사용 이유 : 전역공간을 더럽히지 않고 코드를 모듈러 하려고 썼던 기법, 최근에는 const 나 let, 웹팩이나 모듈화되면서 그 역할들을 걔들이 해주고 있음</p>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>3번 문제 - 함수의 스코프</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> idiots <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'idiots'</span><span class=\"token punctuation\">,</span>\n  genre<span class=\"token operator\">:</span> <span class=\"token string\">'punk rock'</span><span class=\"token punctuation\">,</span>\n  members<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    roto<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      memberName<span class=\"token operator\">:</span> <span class=\"token string\">'roto'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">play</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">band </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>memberName<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> play start</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nidiots<span class=\"token punctuation\">.</span>members<span class=\"token punctuation\">.</span>roto<span class=\"token punctuation\">.</span><span class=\"token function\">play</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>🔑 <code class=\"language-text\">band undefined roto play start</code>출력</p>\n</blockquote>\n<p>play 함수 안에는 name이 없기 때문</p>\n<p>해결하려면 <code class=\"language-text\">console.log(`band ${idiots.name} ${this.memberName} play start.`)</code></p>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>4번 문제 - 해당 코드를 실행하면 에러가 나는데, 의도대로 실행하는 방법을 아는대로 설명</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">RockBand</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">members</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>members <span class=\"token operator\">=</span> members<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">perform</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>members<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">member</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        member<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> theOralcigarettes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RockBand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">'takuya'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">perform</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">' a e u i a e u i'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>🔑 <code class=\"language-text\">theOralcigarettes.perform()</code>을 실행하는 함수가 빠짐</p>\n<p>🔑 <code class=\"language-text\">setTimeout</code>으로 인해 this는 RockBand의 this가 아님</p>\n<p>해결법 1. 클로저 이용</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">RockBand</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">members</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//context 밖에 있는 변수에 접근하기 위한 것</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>members <span class=\"token operator\">=</span> members<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">perform</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      that<span class=\"token punctuation\">.</span>members<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">member</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        member<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>해결법 2. bind이용</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">RockBand</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">members</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>members <span class=\"token operator\">=</span> members<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">perform</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>\n      <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>members<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">member</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          member<span class=\"token punctuation\">.</span><span class=\"token function\">perform</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</blockquote>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>5번 문제 - 해당 코드를 실행하면 숫자가 순차적으로 출력되지 않고 5만 출력된다. 왜 그런 현상이 발생하는지, 어떻게 수정하면 좋을지 서술</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nummbers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">number index </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>i<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>setTimeout이 실행되는 시점에는 루프가 이미 끝나있어서 <code class=\"language-text\">i=5</code> 임</p>\n<p>실제로 for문 안의 <code class=\"language-text\">var</code>은 <code class=\"language-text\">global</code>영역임</p>\n<p>🔑 <code class=\"language-text\">var i = 0</code> 을 <code class=\"language-text\">let i = 0</code>으로 쓰는 것으로 해결</p>\n<p>🔑 setTimeout을 IIFE로 감싸고 파라메터로 i를 넘기는 것으로 해결</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> numbers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">count</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">number index </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>count<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</blockquote>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>7번 문제 - var, let, const차이</p>\n<blockquote>\n<p>🔑</p>\n<p>var : function level scope, 호이스팅 현상, 재할당가능</p>\n<p>let : block level scope, 재할당 가능</p>\n<p>const: block level scope, 재할당 불가능, 그러나 할당된 객체의 함수를 이용해 객체 변경 가능</p>\n<p>ex)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\narr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//error</span>\n\narr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//가능</span></code></pre></div>\n</blockquote>\n</li>\n</ul>\n<br/>\n<ul>\n<li>\n<p>8번 문제 - 클로저란?</p>\n<blockquote>\n<p>🔑 자신의 scope 외부에 있는 것을 가져와 쓰는 것</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>참고 : <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Closures\">https://developer.mozilla.org/ko/docs/Web/JavaScript/Closures</a></p>\n<p><a href=\"https://hyunseob.github.io/2016/08/30/javascript-closure/\">https://hyunseob.github.io/2016/08/30/javascript-closure/</a></p>\n</blockquote>\n</li>\n</ul>\n<p><br/><br/><br/><br/></p>","frontmatter":{"title":"Programers JavascriptStudy Review"},"fields":{"slug":"/2021-06-25-Programers JavascriptStudy/"},"tableOfContents":"<ul>\n<li><a href=\"#%EC%8B%9C%EC%9E%91-%EC%A0%84-%EC%B0%B8%EA%B3%A0%EC%9E%90%EB%A3%8C\">시작 전 참고자료</a></li>\n<li><a href=\"#%EC%B1%85-%EC%B6%94%EC%B2%9C\">책 추천</a></li>\n<li><a href=\"#%EC%BD%94%EB%93%9C%EA%B4%80%EB%A0%A8\">코드관련</a></li>\n<li><a href=\"#%EC%9D%B8%EC%82%AC%EC%9D%B4%ED%8A%B8\">인사이트</a></li>\n<li><a href=\"#%EC%BB%A4%EB%AE%A4%EB%8B%88%ED%8B%B0\">커뮤니티</a></li>\n<li><a href=\"#%EC%82%AC%EC%A0%84%ED%80%B4%EC%A6%88\">사전퀴즈</a></li>\n</ul>"}}]}},"pageContext":{"slug":"/2021-06-25-Programers JavascriptStudy/"}},
    "staticQueryHashes": ["290286666"]}