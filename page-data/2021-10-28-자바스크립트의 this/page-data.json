{
    "componentChunkName": "component---src-components-post-template-tsx",
    "path": "/2021-10-28-자바스크립트의 this/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p>봐도 봐도 이해가 되지 않고 계속해서 헷깔리는 <code class=\"language-text\">this</code> 에 대하여 정리하고자 한다.</p>\n<p>이번 글에서는 <code class=\"language-text\">기본바인딩</code> <code class=\"language-text\">암시적 바인딩</code> <code class=\"language-text\">명시적 바인딩</code> <code class=\"language-text\">new 바인딩</code> 에 대해 정리할 것이다.</p>\n<h2 id=\"-this-란\" style=\"position:relative;\"><a href=\"#-this-%EB%9E%80\" aria-label=\" this 란 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🙄 This 란</h2>\n<p><code class=\"language-text\">This</code> 는 작성 시점이 아닌 런타임 시점에 바인딩 되며 함수 호출 당시 상황에 따라 콘텍스트가 결정된다. 함수 선언 위치와 상관 없이 this 바인딩은 오로지 어떻게 함수를 호출했느냐에 따라 정해진다.</p>\n<h2 id=\"-code-classlanguage-textthiscode-의-기본-규칙\" style=\"position:relative;\"><a href=\"#-code-classlanguage-textthiscode-%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EA%B7%9C%EC%B9%99\" aria-label=\" code classlanguage textthiscode 의 기본 규칙 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🔨 <code class=\"language-text\">This</code> 의 기본 규칙</h2>\n<h3 id=\"1-기본바인딩\" style=\"position:relative;\"><a href=\"#1-%EA%B8%B0%EB%B3%B8%EB%B0%94%EC%9D%B8%EB%94%A9\" aria-label=\"1 기본바인딩 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 기본바인딩</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">단독 함수 실행 Standalone Function Invocation</code> 에 관한 규칙이다.</p>\n</li>\n<li>\n<p><code class=\"language-text\">this</code> 의 기본 규칙이다.</p>\n</li>\n<li>\n<p><strong>일반적으로 호출 했을 때</strong> (전역 객체가 바인딩 된다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2</span></code></pre></div>\n</li>\n<li>\n<p><strong>엄격모드</strong> (전역 객체가 기본 바인딩 대상에서 제외된다. 이 때 <code class=\"language-text\">this</code> 는 <code class=\"language-text\">undefined</code> 이다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 타입 에러 'this'는 'undefined'입니다</span></code></pre></div>\n</li>\n</ul>\n<h3 id=\"2-암시적-바인딩\" style=\"position:relative;\"><a href=\"#2-%EC%95%94%EC%8B%9C%EC%A0%81-%EB%B0%94%EC%9D%B8%EB%94%A9\" aria-label=\"2 암시적 바인딩 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 암시적 바인딩</h3>\n<ul>\n<li>\n<p>호출부에 콘텍스트 객체가 있는지, 객체의 소유/포함 여부를 확인하는 것이다.</p>\n</li>\n<li>\n<p><strong>object에서 호출</strong> (object가 바인딩 된다.)</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  foo<span class=\"token operator\">:</span> foo<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2</span></code></pre></div>\n<ul>\n<li>호출부는 <code class=\"language-text\">obj</code>콘텍스트로 <code class=\"language-text\">foo()</code> 를 참조하므로 <code class=\"language-text\">obj</code> 객체는 함수 호출 시점에 함수의 레퍼런스를 '소유'하거나 '포함' 한다고 볼 수 있다.</li>\n<li><code class=\"language-text\">foo()</code> 호출 시 <code class=\"language-text\">obj</code> 는 <code class=\"language-text\">this</code> 이니 <code class=\"language-text\">this.a</code> 는 <code class=\"language-text\">obj.a</code> 가 된다.</li>\n</ul>\n</li>\n<li>\n<p><strong>객체 프로퍼티 참조 체이닝</strong> (최상위object가 바인딩)</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span>\n  foo<span class=\"token operator\">:</span> foo<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  obj2<span class=\"token operator\">:</span> obj2<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nobj1<span class=\"token punctuation\">.</span>obj2<span class=\"token punctuation\">.</span><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//42</span></code></pre></div>\n<ul>\n<li>최상위 수준의 정보만 호출부와 연관된다. <code class=\"language-text\">obj1.obj2.foo()</code> 처럼 체이닝 호출을 할 경우 중간 단계인 <code class=\"language-text\">obj1.a</code> 값은 무시된다.</li>\n</ul>\n</li>\n<li>\n<p><strong>암시적 소실 - 암시적으로 바인딩 된 함수에서 바인딩이 소실되는 경우</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  foo<span class=\"token operator\">:</span> foo<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 함수 레퍼런스</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"엥, 전역이네!\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//a는 전역객체의 프로퍼티</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//엥, 전역이네!</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">bar</code> 는 <code class=\"language-text\">foo</code> 를 가리키는 또 다른 레퍼런스다.</li>\n<li>그냥 일반적으로 <code class=\"language-text\">bar()</code> 를 호출하므로 기본 바인딩이 적용된다.</li>\n</ul>\n</li>\n<li>\n<p><strong>암시적 소실2 - 콜백함수</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">doFoo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  foo<span class=\"token operator\">:</span> foo<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"엥, 전역이네\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">doFoo</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//엥, 전역이네</span></code></pre></div>\n<ul>\n<li>인자로 전달하는 건 일종의 암시적 할당이다. 함수를 인자로 넘기면 암시적으로 레퍼런스가 할당되어 이전 예제와 결과가 같다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-명시적-바인딩\" style=\"position:relative;\"><a href=\"#3-%EB%AA%85%EC%8B%9C%EC%A0%81-%EB%B0%94%EC%9D%B8%EB%94%A9\" aria-label=\"3 명시적 바인딩 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 명시적 바인딩</h3>\n<ul>\n<li>\n<p><code class=\"language-text\">call</code> <code class=\"language-text\">apply</code> : <code class=\"language-text\">this</code> 에 바인딩 할 객체를 첫째 인자로 받아 함수 호출 시 이 객체를 <code class=\"language-text\">this</code> 로 세팅한다.</p>\n</li>\n<li>\n<p><strong>명시적 바인딩</strong> - <code class=\"language-text\">this</code> 는 반드시 호출 시 넘긴 인자가 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2</span></code></pre></div>\n</li>\n<li>\n<p><strong>하드 바인딩</strong> - <code class=\"language-text\">this</code> 바인딩이 중간에 소실되거나 프레임워크가 임의로 덮어쓰는 문제 해결</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">bar</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//하드 바인딩된 'bar'에서 재정의된 'this'는 의미없다.</span>\n<span class=\"token function\">bar</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>함수 <code class=\"language-text\">bar()</code> 내부에서 <code class=\"language-text\">foo.call(obj)</code> 로 <code class=\"language-text\">foo</code> 를 호출하면서 <code class=\"language-text\">obj</code> 를 <code class=\"language-text\">this</code> 에 강제로 바인딩 하도록 하드 코딩한다.</li>\n</ul>\n</li>\n<li>\n<p><strong>하드 바인딩</strong> <code class=\"language-text\">bind</code></p>\n<ul>\n<li>하드 바인딩은 매우 자주 쓰는 패턴이라 ES5 내장 유틸리티에 구현되어 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">something</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">,</span> something<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">+</span> something<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2 3</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//5</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">bind</code> 는 주어진 this 콘텍스트로 원본 함수를 호출하도록 하드 코딩된 새 함수를 반환한다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-new-바인딩\" style=\"position:relative;\"><a href=\"#4-new-%EB%B0%94%EC%9D%B8%EB%94%A9\" aria-label=\"4 new 바인딩 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. new 바인딩</h3>\n<ul>\n<li>\n<p><strong>먼저 짚고 넘어갈 점</strong></p>\n<ul>\n<li>자바스크립트의 <code class=\"language-text\">new</code> 연산자는 클래스 지향적인 기능과 아무 상관 없다는 것</li>\n<li>자바스크립트의 <code class=\"language-text\">생성자</code> 는 앞에 <code class=\"language-text\">new</code> 연산자가 있을 때 호출되는 일반함수다.</li>\n<li>클래스에 붙은 것도 아니고 클래스 인스턴스화 기능도 없다. <code class=\"language-text\">생성자 함수(Constructor Function)</code> 가 아니라 <code class=\"language-text\">함수를 생성하는 호출(Construction Calls Of Functions)</code> 이라고 옳다.</li>\n</ul>\n</li>\n<li>\n<p><strong><code class=\"language-text\">new</code> 를 붙여 생성자 호출을 했을 때 벌어지는 일</strong></p>\n<ol>\n<li>새 객체가 만들어진다.</li>\n<li>새로 생성된 객체의 <code class=\"language-text\">[[Prototype]]</code> 이 연결된다.</li>\n<li>새로 생성된 객체는 해당 함수 호출 시 <code class=\"language-text\">this</code>로 바인딩 된다.</li>\n<li>이 함수가 자신의 또 다른 객체를 반환하지 않는 한 <code class=\"language-text\">new</code> 와 함께 호출된 함수는 자동으로 새로 생성된 객체를 반환한다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">foo</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">new</code> 는 함수 호출 시 <code class=\"language-text\">this</code>를 새 객체와 바인딩 하는 방법이고, 이것이 <code class=\"language-text\">new</code> 바인딩이다.</li>\n</ul>\n</li>\n</ul>\n<p>This에 대해 기본적으로 많이 알고 있는 내용들에 대하여 정리해봤다.</p>\n<p>예시를 보면서 몇 번이고 되돌아가서 많은 양이 아닌데도 읽는데 꽤 오랜 시간이 걸리는 것 같다.</p>\n<p>순수 js를 쓰면서 This 때문에 당황스러웠던 적이 몇 번 있는데, 그 때의 경험이 있어서 조금 더 와닿았다. 다음 번에 읽을 때는 지금보다는 쉽게 읽을 수 있을거라는 기대를.............해본다....</p>\n<p>(🍕TIP) new 에 대한 체크는 이런 식으로 할 수 있다..</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token string\">\"Foo() 함수는 new 연산자로 호출되어야 합니다!\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Foo() 함수는 new 연산자로 호출되어야 합니다!</span></code></pre></div>\n<p>이 다음에는 <code class=\"language-text\">this가 바인딩 되는 순서(우선순위)</code>, <code class=\"language-text\">바인딩 예외</code> , <code class=\"language-text\">어휘적(lexical) this</code> 에 대해 정리할 것이다. 😊</p>\n<p>출처</p>\n<p>[You don't know JS - this와 객체 프로토 타입, 비동기와 성능] - 카일심슨</p>","frontmatter":{"title":"자바스크립트의 THIS"},"fields":{"slug":"/2021-10-28-자바스크립트의 this/"},"tableOfContents":"<ul>\n<li>\n<p><a href=\"#-this-%EB%9E%80\">🙄 This 란</a></p>\n</li>\n<li>\n<p><a href=\"#-code-classlanguage-textthiscode-%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EA%B7%9C%EC%B9%99\">🔨 <code class=\"language-text\">This</code> 의 기본 규칙</a></p>\n<ul>\n<li><a href=\"#1-%EA%B8%B0%EB%B3%B8%EB%B0%94%EC%9D%B8%EB%94%A9\">1. 기본바인딩</a></li>\n<li><a href=\"#2-%EC%95%94%EC%8B%9C%EC%A0%81-%EB%B0%94%EC%9D%B8%EB%94%A9\">2. 암시적 바인딩</a></li>\n<li><a href=\"#3-%EB%AA%85%EC%8B%9C%EC%A0%81-%EB%B0%94%EC%9D%B8%EB%94%A9\">3. 명시적 바인딩</a></li>\n<li><a href=\"#4-new-%EB%B0%94%EC%9D%B8%EB%94%A9\">4. new 바인딩</a></li>\n</ul>\n</li>\n</ul>"}}]}},"pageContext":{"slug":"/2021-10-28-자바스크립트의 this/"}},
    "staticQueryHashes": ["290286666"]}