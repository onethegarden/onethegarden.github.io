{
    "componentChunkName": "component---src-components-post-template-tsx",
    "path": "/2022-04-03-nextjs-jest-config-js/",
    "result": {"data":{"allMarkdownRemark":{"edges":[{"node":{"html":"<p>next.js 12.1 부터 SWC를 사용하여 아주 간단하게(zero-configuration) Jest를 지원해줍니다. 그 이전에 babel로 할 땐 설정해 줘야 할 게 정말 많았었습니다. <a href=\"https://nextjs.org/docs/testing#setting-up-jest-with-babel\">링크</a></p>\n<p>회사 프로젝트에 적용 후 babel로 설정했을 때는 15초 걸리던 게 SWC로 설정했을 때 8~9초 정도로 단축되었습니다.</p>\n<p>관련된 내용을 번역했습니다.</p>\n<p>12.1 릴리즈 노트 <a href=\"https://nextjs.org/blog/next-12-1#zero-configuration-jest-plugin\">https://nextjs.org/blog/next-12-1#zero-configuration-jest-plugin</a></p>\n<p>공식문서 <a href=\"https://nextjs.org/docs/advanced-features/compiler#jest\">https://nextjs.org/docs/advanced-features/compiler#jest</a></p>\n<h2 id=\"설정이-필요-없는-jest-plugin\" style=\"position:relative;\"><a href=\"#%EC%84%A4%EC%A0%95%EC%9D%B4-%ED%95%84%EC%9A%94-%EC%97%86%EB%8A%94-jest-plugin\" aria-label=\"설정이 필요 없는 jest plugin permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>설정이 필요 없는 jest plugin</h2>\n<p>SWC를 사용하여 설정없이 Jest를 지원</p>\n<p>Jest 지원은 이전에 Babel에서 제공했던 설정을 기본으로 Next.js의 아래 기능들과 함께 jest 설정을 간단하게 할 수 있습니다.</p>\n<ul>\n<li><code class=\"language-text\">.css</code>, <code class=\"language-text\">.module.css</code> ( <code class=\"language-text\">.scss</code> 가 변형된 것), 그리고 image imports를 자동으로 mocking합니다.</li>\n<li>SWC를 사용하여 <code class=\"language-text\">transform</code> 을 자동으로 설정합니다.</li>\n<li><code class=\"language-text\">.env</code>를 <code class=\"language-text\">process.env</code>에 로드해줍니다.</li>\n<li><strong>테스트</strong> 시에 <code class=\"language-text\">node_modules</code>를 무시하고 변환합니다.</li>\n<li>테스트 시에 <code class=\"language-text\">.next</code> 를 무시합니다.</li>\n<li>테스트 환경의 SWC 변환을 할 수 있게 하는 정보인 <code class=\"language-text\">next.config.js</code>를 불러옵니다.</li>\n</ul>\n<p>우선, <code class=\"language-text\">npm install next@latest</code> 로 next.js의 최신 버전으로 업데이트 합니다. 그리고, <code class=\"language-text\">jest.config.js</code> 파일을 업데이트 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// jest.config.js</span>\n<span class=\"token keyword\">const</span> nextJest <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'next/jest'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// next.config.js 와 .env 파일을 로드할 수 있는 Next.js 앱 경로를 설정합니다.</span>\n<span class=\"token keyword\">const</span> createJestConfig <span class=\"token operator\">=</span> <span class=\"token function\">nextJest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> dir <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Jest에 전달할 custom 설정들을 합니다.</span>\n<span class=\"token keyword\">const</span> customJestConfig <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">setupFilesAfterEnv</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'&lt;rootDir>/jest.setup.js'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// createJestConfig는 next/jest가 비동기인 Next.js 설정을 로드할 수 있도록 하기 위함입니다.</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token function\">createJestConfig</span><span class=\"token punctuation\">(</span>customJestConfig<span class=\"token punctuation\">)</span>\n</code></pre></div>\n<h2 id=\"nextjest-코드\" style=\"position:relative;\"><a href=\"#nextjest-%EC%BD%94%EB%93%9C\" aria-label=\"nextjest 코드 permalink\" class=\"anchor-header before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>nextJest 코드</h2>\n<ul>\n<li>nextJest 함수의 내용이고, 위에서 설명한 내용들이 코드로 적혀있습니다. 주석으로 그 이유도 잘 적혀있어서 첨부합니다. (<a href=\"https://github.com/vercel/next.js/blob/647c06b339ccabb5ee583cbdd32e12b8af6b0fd4/packages/next/build/jest/jest.ts\">링크</a>)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">nextJest</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">options</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> dir<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// createJestConfig</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token literal-property property\">customJestConfig</span><span class=\"token operator\">:</span> any</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 이 함수는 jest.config.js가 modules.export 하기 위함이다.</span>\n    <span class=\"token comment\">// jest가 부르고 await한다.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> nextConfig\n      <span class=\"token keyword\">let</span> jsConfig\n      <span class=\"token keyword\">let</span> resolvedBaseUrl\n      <span class=\"token keyword\">let</span> isEsmProject <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>dir<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> resolvedDir <span class=\"token operator\">=</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">.</span>dir<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">const</span> packageConfig <span class=\"token operator\">=</span> <span class=\"token function\">loadClosestPackageJson</span><span class=\"token punctuation\">(</span>resolvedDir<span class=\"token punctuation\">)</span>\n        isEsmProject <span class=\"token operator\">=</span> packageConfig<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'module'</span>\n\n        nextConfig <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">getConfig</span><span class=\"token punctuation\">(</span>resolvedDir<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">loadEnvConfig</span><span class=\"token punctuation\">(</span>resolvedDir<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> Log<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\">// TODO: revisit when bug in SWC is fixed that strips `.css`</span>\n        <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">loadJsConfig</span><span class=\"token punctuation\">(</span>resolvedDir<span class=\"token punctuation\">,</span> nextConfig<span class=\"token punctuation\">)</span>\n        jsConfig <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>jsConfig\n        resolvedBaseUrl <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>resolvedBaseUrl\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token comment\">// 비동기 설정이 지원되는지 확인</span>\n      <span class=\"token keyword\">const</span> resolvedJestConfig <span class=\"token operator\">=</span>\n        <span class=\"token keyword\">typeof</span> customJestConfig <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span>\n          <span class=\"token operator\">?</span> <span class=\"token keyword\">await</span> <span class=\"token function\">customJestConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token operator\">:</span> customJestConfig\n\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>resolvedJestConfig<span class=\"token punctuation\">,</span>\n\n        <span class=\"token literal-property property\">moduleNameMapper</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// Handle CSS imports (with CSS modules)</span>\n          <span class=\"token comment\">// https://jestjs.io/docs/webpack#mocking-css-modules</span>\n          <span class=\"token string-property property\">'^.+\\\\.module\\\\.(css|sass|scss)$'</span><span class=\"token operator\">:</span>\n            require<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./object-proxy.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n          <span class=\"token comment\">// Handle CSS imports (without CSS modules)</span>\n          <span class=\"token string-property property\">'^.+\\\\.(css|sass|scss)$'</span><span class=\"token operator\">:</span> require<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./__mocks__/styleMock.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n          <span class=\"token comment\">// Handle image imports</span>\n          <span class=\"token string-property property\">'^.+\\\\.(jpg|jpeg|png|gif|webp|avif|svg)$'</span><span class=\"token operator\">:</span> require<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>\n            <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">./__mocks__/fileMock.js</span><span class=\"token template-punctuation string\">`</span></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\n          <span class=\"token comment\">// Custom한 설정은 기본 설정에 override 될 수 있습니다.</span>\n          <span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>resolvedJestConfig<span class=\"token punctuation\">.</span>moduleNameMapper <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">testPathIgnorePatterns</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token comment\">// node_modules에서는 테스트를 찾지 않습니다.</span>\n          <span class=\"token string\">'/node_modules/'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token comment\">// Next.js build 결과물에 대해서는 테스트를 찾지 않습니다.</span>\n          <span class=\"token string\">'/.next/'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token comment\">// Custom한 설정은 testPathIgnorePatterns 에 추가할 수 있지만, 수정할 수는 없습니다.</span>\n          <span class=\"token comment\">// 이것은 `.next` 와 `node_modules` 가 항상 제외되기 위함입니다.</span>\n          <span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>resolvedJestConfig<span class=\"token punctuation\">.</span>testPathIgnorePatterns <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token literal-property property\">transform</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// SWC를 사용하여 tests 컴파일</span>\n          <span class=\"token string-property property\">'^.+\\\\.(js|jsx|ts|tsx)$'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            require<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'../swc/jest-transformer'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span>\n              nextConfig<span class=\"token punctuation\">,</span>\n              jsConfig<span class=\"token punctuation\">,</span>\n              resolvedBaseUrl<span class=\"token punctuation\">,</span>\n              isEsmProject<span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          <span class=\"token comment\">// 기본 변환을 추가하고 override 하는 것을 허용한다.</span>\n          <span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>resolvedJestConfig<span class=\"token punctuation\">.</span>transform <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n        <span class=\"token literal-property property\">transformIgnorePatterns</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n          <span class=\"token comment\">// Next.js의 기본동작을 맞추기 위해 node_modules는 변환시키지 않습니다.</span>\n          <span class=\"token string\">'/node_modules/'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token comment\">// CSS modules 은 Mocking 됐기 때문에 변환시키지 않습니다.</span>\n          <span class=\"token string\">'^.+\\\\.module\\\\.(css|sass|scss)$'</span><span class=\"token punctuation\">,</span>\n\n          <span class=\"token comment\">// Custom한 설정은 testPathIgnorePatterns 에 추가할 수 있지만, 수정할 수는 없습니다.</span>\n          <span class=\"token comment\">// 이것은 항상 `node_modules` 과 .module.css/sass/scss 가 제외되게 하기 위함입니다.</span>\n          <span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>resolvedJestConfig<span class=\"token punctuation\">.</span>transformIgnorePatterns <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"(next.js 12.1) zero configuration jest plugin"},"fields":{"slug":"/2022-04-03-nextjs-jest-config-js/"},"tableOfContents":"<ul>\n<li><a href=\"#%EC%84%A4%EC%A0%95%EC%9D%B4-%ED%95%84%EC%9A%94-%EC%97%86%EB%8A%94-jest-plugin\">설정이 필요 없는 jest plugin</a></li>\n<li><a href=\"#nextjest-%EC%BD%94%EB%93%9C\">nextJest 코드</a></li>\n</ul>"}}]}},"pageContext":{"slug":"/2022-04-03-nextjs-jest-config-js/"}},
    "staticQueryHashes": ["290286666"]}